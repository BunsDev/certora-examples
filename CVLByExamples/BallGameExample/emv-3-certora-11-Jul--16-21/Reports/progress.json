{
	RegisteredRule(rule=playerTwoNeverWins, ruleType=InvariantCheck(originalInv=CVLInvariant(cvlRange=BallGame.spec:7:1, id=playerTwoNeverWins, ruleType=spec.cvlast.SpecType$Single$FromUser$SpecFile@5436ad87, params=[], exp=ballPosition() != 2, methodParamFilters=MethodParamFilters(cvlRange=unknownLocation, scope=(Spec file -> Invariant playerTwoNeverWins), methodParamToFilter={}), proof=CVLInvariantProof(preserved=[]), scope=(Spec file -> Invariant playerTwoNeverWins), scopeId=0)), parentCVLDeclarationId=null, isCounted=true): true,
	RegisteredRule(rule=playerTwoNeverWins_preserve, ruleType=Preservation(originalInv=CVLInvariant(cvlRange=BallGame.spec:7:1, id=playerTwoNeverWins, ruleType=spec.cvlast.SpecType$Single$FromUser$SpecFile@5436ad87, params=[], exp=ballPosition() != 2, methodParamFilters=MethodParamFilters(cvlRange=unknownLocation, scope=(Spec file -> Invariant playerTwoNeverWins), methodParamToFilter={}), proof=CVLInvariantProof(preserved=[]), scope=(Spec file -> Invariant playerTwoNeverWins), scopeId=0)), parentCVLDeclarationId=playerTwoNeverWins, isCounted=true): true,
	RegisteredRule(rule=playerTwoNeverWins_instate, ruleType=Initialization(originalInv=CVLInvariant(cvlRange=BallGame.spec:7:1, id=playerTwoNeverWins, ruleType=spec.cvlast.SpecType$Single$FromUser$SpecFile@5436ad87, params=[], exp=ballPosition() != 2, methodParamFilters=MethodParamFilters(cvlRange=unknownLocation, scope=(Spec file -> Invariant playerTwoNeverWins), methodParamToFilter={}), proof=CVLInvariantProof(preserved=[]), scope=(Spec file -> Invariant playerTwoNeverWins), scopeId=0)), parentCVLDeclarationId=playerTwoNeverWins, isCounted=true): true,
	RegisteredRule(rule=playerTwoNeverWins_skipped_preserve_ballPosition(), ruleType=Skipped(originalInv=CVLInvariant(cvlRange=BallGame.spec:7:1, id=playerTwoNeverWins, ruleType=spec.cvlast.SpecType$Single$FromUser$SpecFile@5436ad87, params=[], exp=ballPosition() != 2, methodParamFilters=MethodParamFilters(cvlRange=unknownLocation, scope=(Spec file -> Invariant playerTwoNeverWins), methodParamToFilter={}), proof=CVLInvariantProof(preserved=[]), scope=(Spec file -> Invariant playerTwoNeverWins), scopeId=0)), parentCVLDeclarationId=playerTwoNeverWins, isCounted=true): true,
	RegisteredRule(rule=envfreeFuncsStaticCheck, ruleType=spec.cvlast.SpecType$Group$StaticEnvFree@860ad929, parentCVLDeclarationId=null, isCounted=true): true,
	RegisteredRule(rule=ballPosition(), ruleType=Static(contractFunction=BallGameBroken.ballPosition() returns (uint8)), parentCVLDeclarationId=envfreeFuncsStaticCheck, isCounted=true): true,
	RegisteredRule(rule=pass(), ruleType=Static(contractFunction=BallGameBroken.pass()), parentCVLDeclarationId=envfreeFuncsStaticCheck, isCounted=true): true,
	RegisteredRule(rule=pass(), ruleType=Preservation(originalInv=CVLInvariant(cvlRange=BallGame.spec:7:1, id=playerTwoNeverWins, ruleType=spec.cvlast.SpecType$Single$FromUser$SpecFile@5436ad87, params=[], exp=ballPosition() != 2, methodParamFilters=MethodParamFilters(cvlRange=unknownLocation, scope=(Spec file -> Invariant playerTwoNeverWins), methodParamToFilter={}), proof=CVLInvariantProof(preserved=[]), scope=(Spec file -> Invariant playerTwoNeverWins), scopeId=0)), parentCVLDeclarationId=playerTwoNeverWins_preserve, isCounted=true): true
}