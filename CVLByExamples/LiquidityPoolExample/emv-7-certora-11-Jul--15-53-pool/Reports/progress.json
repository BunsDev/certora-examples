{
	RegisteredRule(rule=flashLoanIncreasesBalance, ruleType=spec.cvlast.SpecType$Single$FromUser$SpecFile@5436ad87, parentCVLDeclarationId=null, isCounted=true): true,
	RegisteredRule(rule=integrityOfDeposit, ruleType=spec.cvlast.SpecType$Single$FromUser$SpecFile@5436ad87, parentCVLDeclarationId=null, isCounted=true): true,
	RegisteredRule(rule=noAllowance, ruleType=InvariantCheck(originalInv=CVLInvariant(cvlRange=pool.spec:30:1, id=noAllowance, ruleType=spec.cvlast.SpecType$Single$FromUser$SpecFile@5436ad87, params=[address a], exp=underlyingAllowance(a) == 0, methodParamFilters=MethodParamFilters(cvlRange=unknownLocation, scope=(Spec file -> Invariant noAllowance), methodParamToFilter={}), proof=CVLInvariantProof(preserved=[preserved generic in scope (Spec file -> Invariant noAllowance -> Generic preserve block)]), scope=(Spec file -> Invariant noAllowance), scopeId=3)), parentCVLDeclarationId=null, isCounted=true): true,
	RegisteredRule(rule=noAllowance_preserve, ruleType=Preservation(originalInv=CVLInvariant(cvlRange=pool.spec:30:1, id=noAllowance, ruleType=spec.cvlast.SpecType$Single$FromUser$SpecFile@5436ad87, params=[address a], exp=underlyingAllowance(a) == 0, methodParamFilters=MethodParamFilters(cvlRange=unknownLocation, scope=(Spec file -> Invariant noAllowance), methodParamToFilter={}), proof=CVLInvariantProof(preserved=[preserved generic in scope (Spec file -> Invariant noAllowance -> Generic preserve block)]), scope=(Spec file -> Invariant noAllowance), scopeId=3)), parentCVLDeclarationId=noAllowance, isCounted=true): true,
	RegisteredRule(rule=noAllowance_instate, ruleType=Initialization(originalInv=CVLInvariant(cvlRange=pool.spec:30:1, id=noAllowance, ruleType=spec.cvlast.SpecType$Single$FromUser$SpecFile@5436ad87, params=[address a], exp=underlyingAllowance(a) == 0, methodParamFilters=MethodParamFilters(cvlRange=unknownLocation, scope=(Spec file -> Invariant noAllowance), methodParamToFilter={}), proof=CVLInvariantProof(preserved=[preserved generic in scope (Spec file -> Invariant noAllowance -> Generic preserve block)]), scope=(Spec file -> Invariant noAllowance), scopeId=3)), parentCVLDeclarationId=noAllowance, isCounted=true): true,
	RegisteredRule(rule=noAllowance_skipped_preserve_calcPremium(uint256), ruleType=Skipped(originalInv=CVLInvariant(cvlRange=pool.spec:30:1, id=noAllowance, ruleType=spec.cvlast.SpecType$Single$FromUser$SpecFile@5436ad87, params=[address a], exp=underlyingAllowance(a) == 0, methodParamFilters=MethodParamFilters(cvlRange=unknownLocation, scope=(Spec file -> Invariant noAllowance), methodParamToFilter={}), proof=CVLInvariantProof(preserved=[preserved generic in scope (Spec file -> Invariant noAllowance -> Generic preserve block)]), scope=(Spec file -> Invariant noAllowance), scopeId=3)), parentCVLDeclarationId=noAllowance, isCounted=true): true,
	RegisteredRule(rule=noAllowance_skipped_preserve_amountToShares(uint256), ruleType=Skipped(originalInv=CVLInvariant(cvlRange=pool.spec:30:1, id=noAllowance, ruleType=spec.cvlast.SpecType$Single$FromUser$SpecFile@5436ad87, params=[address a], exp=underlyingAllowance(a) == 0, methodParamFilters=MethodParamFilters(cvlRange=unknownLocation, scope=(Spec file -> Invariant noAllowance), methodParamToFilter={}), proof=CVLInvariantProof(preserved=[preserved generic in scope (Spec file -> Invariant noAllowance -> Generic preserve block)]), scope=(Spec file -> Invariant noAllowance), scopeId=3)), parentCVLDeclarationId=noAllowance, isCounted=true): true,
	RegisteredRule(rule=noAllowance_skipped_preserve_asset(), ruleType=Skipped(originalInv=CVLInvariant(cvlRange=pool.spec:30:1, id=noAllowance, ruleType=spec.cvlast.SpecType$Single$FromUser$SpecFile@5436ad87, params=[address a], exp=underlyingAllowance(a) == 0, methodParamFilters=MethodParamFilters(cvlRange=unknownLocation, scope=(Spec file -> Invariant noAllowance), methodParamToFilter={}), proof=CVLInvariantProof(preserved=[preserved generic in scope (Spec file -> Invariant noAllowance -> Generic preserve block)]), scope=(Spec file -> Invariant noAllowance), scopeId=3)), parentCVLDeclarationId=noAllowance, isCounted=true): true,
	RegisteredRule(rule=noAllowance_skipped_preserve_balanceOf(address), ruleType=Skipped(originalInv=CVLInvariant(cvlRange=pool.spec:30:1, id=noAllowance, ruleType=spec.cvlast.SpecType$Single$FromUser$SpecFile@5436ad87, params=[address a], exp=underlyingAllowance(a) == 0, methodParamFilters=MethodParamFilters(cvlRange=unknownLocation, scope=(Spec file -> Invariant noAllowance), methodParamToFilter={}), proof=CVLInvariantProof(preserved=[preserved generic in scope (Spec file -> Invariant noAllowance -> Generic preserve block)]), scope=(Spec file -> Invariant noAllowance), scopeId=3)), parentCVLDeclarationId=noAllowance, isCounted=true): true,
	RegisteredRule(rule=noAllowance_skipped_preserve_assetBalance(), ruleType=Skipped(originalInv=CVLInvariant(cvlRange=pool.spec:30:1, id=noAllowance, ruleType=spec.cvlast.SpecType$Single$FromUser$SpecFile@5436ad87, params=[address a], exp=underlyingAllowance(a) == 0, methodParamFilters=MethodParamFilters(cvlRange=unknownLocation, scope=(Spec file -> Invariant noAllowance), methodParamToFilter={}), proof=CVLInvariantProof(preserved=[preserved generic in scope (Spec file -> Invariant noAllowance -> Generic preserve block)]), scope=(Spec file -> Invariant noAllowance), scopeId=3)), parentCVLDeclarationId=noAllowance, isCounted=true): true,
	RegisteredRule(rule=noAllowance_skipped_preserve_feeRate(), ruleType=Skipped(originalInv=CVLInvariant(cvlRange=pool.spec:30:1, id=noAllowance, ruleType=spec.cvlast.SpecType$Single$FromUser$SpecFile@5436ad87, params=[address a], exp=underlyingAllowance(a) == 0, methodParamFilters=MethodParamFilters(cvlRange=unknownLocation, scope=(Spec file -> Invariant noAllowance), methodParamToFilter={}), proof=CVLInvariantProof(preserved=[preserved generic in scope (Spec file -> Invariant noAllowance -> Generic preserve block)]), scope=(Spec file -> Invariant noAllowance), scopeId=3)), parentCVLDeclarationId=noAllowance, isCounted=true): true,
	RegisteredRule(rule=noAllowance_skipped_preserve_sharesToAmount(uint256), ruleType=Skipped(originalInv=CVLInvariant(cvlRange=pool.spec:30:1, id=noAllowance, ruleType=spec.cvlast.SpecType$Single$FromUser$SpecFile@5436ad87, params=[address a], exp=underlyingAllowance(a) == 0, methodParamFilters=MethodParamFilters(cvlRange=unknownLocation, scope=(Spec file -> Invariant noAllowance), methodParamToFilter={}), proof=CVLInvariantProof(preserved=[preserved generic in scope (Spec file -> Invariant noAllowance -> Generic preserve block)]), scope=(Spec file -> Invariant noAllowance), scopeId=3)), parentCVLDeclarationId=noAllowance, isCounted=true): true,
	RegisteredRule(rule=noAllowance_skipped_preserve_totalSupply(), ruleType=Skipped(originalInv=CVLInvariant(cvlRange=pool.spec:30:1, id=noAllowance, ruleType=spec.cvlast.SpecType$Single$FromUser$SpecFile@5436ad87, params=[address a], exp=underlyingAllowance(a) == 0, methodParamFilters=MethodParamFilters(cvlRange=unknownLocation, scope=(Spec file -> Invariant noAllowance), methodParamToFilter={}), proof=CVLInvariantProof(preserved=[preserved generic in scope (Spec file -> Invariant noAllowance -> Generic preserve block)]), scope=(Spec file -> Invariant noAllowance), scopeId=3)), parentCVLDeclarationId=noAllowance, isCounted=true): true,
	RegisteredRule(rule=noAllowance_skipped_preserve_allowance(address,address), ruleType=Skipped(originalInv=CVLInvariant(cvlRange=pool.spec:30:1, id=noAllowance, ruleType=spec.cvlast.SpecType$Single$FromUser$SpecFile@5436ad87, params=[address a], exp=underlyingAllowance(a) == 0, methodParamFilters=MethodParamFilters(cvlRange=unknownLocation, scope=(Spec file -> Invariant noAllowance), methodParamToFilter={}), proof=CVLInvariantProof(preserved=[preserved generic in scope (Spec file -> Invariant noAllowance -> Generic preserve block)]), scope=(Spec file -> Invariant noAllowance), scopeId=3)), parentCVLDeclarationId=noAllowance, isCounted=true): true,
	RegisteredRule(rule=envfreeFuncsStaticCheck, ruleType=spec.cvlast.SpecType$Group$StaticEnvFree@860ad929, parentCVLDeclarationId=null, isCounted=true): true,
	RegisteredRule(rule=asset(), ruleType=Static(contractFunction=PoolHarness.asset() returns (Contract IERC20)), parentCVLDeclarationId=envfreeFuncsStaticCheck, isCounted=true): true,
	RegisteredRule(rule=underlyingAllowance(address), ruleType=Static(contractFunction=PoolHarness.underlyingAllowance(address a) returns (uint256)), parentCVLDeclarationId=envfreeFuncsStaticCheck, isCounted=true): true,
	RegisteredRule(rule=balanceOf(address), ruleType=Static(contractFunction=PoolHarness.balanceOf(address account) returns (uint256)), parentCVLDeclarationId=envfreeFuncsStaticCheck, isCounted=true): true,
	RegisteredRule(rule=underlyingBalance(), ruleType=Static(contractFunction=PoolHarness.underlyingBalance() returns (uint256)), parentCVLDeclarationId=envfreeFuncsStaticCheck, isCounted=true): true,
	RegisteredRule(rule=totalSupply(), ruleType=Static(contractFunction=PoolHarness.totalSupply() returns (uint256)), parentCVLDeclarationId=envfreeFuncsStaticCheck, isCounted=true): true,
	RegisteredRule(rule=flashLoan(address,uint256), ruleType=Preservation(originalInv=CVLInvariant(cvlRange=pool.spec:30:1, id=noAllowance, ruleType=spec.cvlast.SpecType$Single$FromUser$SpecFile@5436ad87, params=[address a], exp=underlyingAllowance(a) == 0, methodParamFilters=MethodParamFilters(cvlRange=unknownLocation, scope=(Spec file -> Invariant noAllowance), methodParamToFilter={}), proof=CVLInvariantProof(preserved=[preserved generic in scope (Spec file -> Invariant noAllowance -> Generic preserve block)]), scope=(Spec file -> Invariant noAllowance), scopeId=3)), parentCVLDeclarationId=noAllowance_preserve, isCounted=true): true,
	RegisteredRule(rule=underlyingAllowance(address), ruleType=Preservation(originalInv=CVLInvariant(cvlRange=pool.spec:30:1, id=noAllowance, ruleType=spec.cvlast.SpecType$Single$FromUser$SpecFile@5436ad87, params=[address a], exp=underlyingAllowance(a) == 0, methodParamFilters=MethodParamFilters(cvlRange=unknownLocation, scope=(Spec file -> Invariant noAllowance), methodParamToFilter={}), proof=CVLInvariantProof(preserved=[preserved generic in scope (Spec file -> Invariant noAllowance -> Generic preserve block)]), scope=(Spec file -> Invariant noAllowance), scopeId=3)), parentCVLDeclarationId=noAllowance_preserve, isCounted=true): true,
	RegisteredRule(rule=transfer(address,uint256), ruleType=Preservation(originalInv=CVLInvariant(cvlRange=pool.spec:30:1, id=noAllowance, ruleType=spec.cvlast.SpecType$Single$FromUser$SpecFile@5436ad87, params=[address a], exp=underlyingAllowance(a) == 0, methodParamFilters=MethodParamFilters(cvlRange=unknownLocation, scope=(Spec file -> Invariant noAllowance), methodParamToFilter={}), proof=CVLInvariantProof(preserved=[preserved generic in scope (Spec file -> Invariant noAllowance -> Generic preserve block)]), scope=(Spec file -> Invariant noAllowance), scopeId=3)), parentCVLDeclarationId=noAllowance_preserve, isCounted=true): true,
	RegisteredRule(rule=approve(address,uint256), ruleType=Preservation(originalInv=CVLInvariant(cvlRange=pool.spec:30:1, id=noAllowance, ruleType=spec.cvlast.SpecType$Single$FromUser$SpecFile@5436ad87, params=[address a], exp=underlyingAllowance(a) == 0, methodParamFilters=MethodParamFilters(cvlRange=unknownLocation, scope=(Spec file -> Invariant noAllowance), methodParamToFilter={}), proof=CVLInvariantProof(preserved=[preserved generic in scope (Spec file -> Invariant noAllowance -> Generic preserve block)]), scope=(Spec file -> Invariant noAllowance), scopeId=3)), parentCVLDeclarationId=noAllowance_preserve, isCounted=true): true,
	RegisteredRule(rule=deposit(uint256), ruleType=Preservation(originalInv=CVLInvariant(cvlRange=pool.spec:30:1, id=noAllowance, ruleType=spec.cvlast.SpecType$Single$FromUser$SpecFile@5436ad87, params=[address a], exp=underlyingAllowance(a) == 0, methodParamFilters=MethodParamFilters(cvlRange=unknownLocation, scope=(Spec file -> Invariant noAllowance), methodParamToFilter={}), proof=CVLInvariantProof(preserved=[preserved generic in scope (Spec file -> Invariant noAllowance -> Generic preserve block)]), scope=(Spec file -> Invariant noAllowance), scopeId=3)), parentCVLDeclarationId=noAllowance_preserve, isCounted=true): true,
	RegisteredRule(rule=withdraw(uint256), ruleType=Preservation(originalInv=CVLInvariant(cvlRange=pool.spec:30:1, id=noAllowance, ruleType=spec.cvlast.SpecType$Single$FromUser$SpecFile@5436ad87, params=[address a], exp=underlyingAllowance(a) == 0, methodParamFilters=MethodParamFilters(cvlRange=unknownLocation, scope=(Spec file -> Invariant noAllowance), methodParamToFilter={}), proof=CVLInvariantProof(preserved=[preserved generic in scope (Spec file -> Invariant noAllowance -> Generic preserve block)]), scope=(Spec file -> Invariant noAllowance), scopeId=3)), parentCVLDeclarationId=noAllowance_preserve, isCounted=true): true,
	RegisteredRule(rule=underlyingBalance(), ruleType=Preservation(originalInv=CVLInvariant(cvlRange=pool.spec:30:1, id=noAllowance, ruleType=spec.cvlast.SpecType$Single$FromUser$SpecFile@5436ad87, params=[address a], exp=underlyingAllowance(a) == 0, methodParamFilters=MethodParamFilters(cvlRange=unknownLocation, scope=(Spec file -> Invariant noAllowance), methodParamToFilter={}), proof=CVLInvariantProof(preserved=[preserved generic in scope (Spec file -> Invariant noAllowance -> Generic preserve block)]), scope=(Spec file -> Invariant noAllowance), scopeId=3)), parentCVLDeclarationId=noAllowance_preserve, isCounted=true): true,
	RegisteredRule(rule=transferFrom(address,address,uint256), ruleType=Preservation(originalInv=CVLInvariant(cvlRange=pool.spec:30:1, id=noAllowance, ruleType=spec.cvlast.SpecType$Single$FromUser$SpecFile@5436ad87, params=[address a], exp=underlyingAllowance(a) == 0, methodParamFilters=MethodParamFilters(cvlRange=unknownLocation, scope=(Spec file -> Invariant noAllowance), methodParamToFilter={}), proof=CVLInvariantProof(preserved=[preserved generic in scope (Spec file -> Invariant noAllowance -> Generic preserve block)]), scope=(Spec file -> Invariant noAllowance), scopeId=3)), parentCVLDeclarationId=noAllowance_preserve, isCounted=true): true
}