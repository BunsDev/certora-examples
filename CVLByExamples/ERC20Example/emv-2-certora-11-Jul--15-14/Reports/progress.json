{
	RegisteredRule(rule=transferSpec, ruleType=spec.cvlast.SpecType$Single$FromUser$SpecFile@5436ad87, parentCVLDeclarationId=null, isCounted=true): true,
	RegisteredRule(rule=transferReverts, ruleType=spec.cvlast.SpecType$Single$FromUser$SpecFile@5436ad87, parentCVLDeclarationId=null, isCounted=true): true,
	RegisteredRule(rule=transferDoesntRevert, ruleType=spec.cvlast.SpecType$Single$FromUser$SpecFile@5436ad87, parentCVLDeclarationId=null, isCounted=true): true,
	RegisteredRule(rule=transferFromSpec, ruleType=spec.cvlast.SpecType$Single$FromUser$SpecFile@5436ad87, parentCVLDeclarationId=null, isCounted=true): true,
	RegisteredRule(rule=transferFromReverts, ruleType=spec.cvlast.SpecType$Single$FromUser$SpecFile@5436ad87, parentCVLDeclarationId=null, isCounted=true): true,
	RegisteredRule(rule=transferFromDoesntRevert, ruleType=spec.cvlast.SpecType$Single$FromUser$SpecFile@5436ad87, parentCVLDeclarationId=null, isCounted=true): true,
	RegisteredRule(rule=onlyHolderCanChangeAllowance, ruleType=spec.cvlast.SpecType$Single$FromUser$SpecFile@5436ad87, parentCVLDeclarationId=null, isCounted=true): true,
	RegisteredRule(rule=balancesBoundedByTotalSupply, ruleType=InvariantCheck(originalInv=CVLInvariant(cvlRange=ERC20.spec:115:1, id=balancesBoundedByTotalSupply, ruleType=spec.cvlast.SpecType$Single$FromUser$SpecFile@5436ad87, params=[address alice, address bob], exp=balanceOf(alice) + balanceOf(bob) <= to_mathint(totalSupply()), methodParamFilters=MethodParamFilters(cvlRange=unknownLocation, scope=(Spec file -> Invariant balancesBoundedByTotalSupply), methodParamToFilter={}), proof=CVLInvariantProof(preserved=[preserved ERC20.transfer(address recip, uint256 amount) in scope (Spec file -> Invariant balancesBoundedByTotalSupply -> Preserve block ERC20.transfer(address recip, uint256 amount)), preserved ERC20.transferFrom(address from, address to, uint256 amount) in scope (Spec file -> Invariant balancesBoundedByTotalSupply -> Preserve block ERC20.transferFrom(address from, address to, uint256 amount))]), scope=(Spec file -> Invariant balancesBoundedByTotalSupply), scopeId=7)), parentCVLDeclarationId=null, isCounted=true): true,
	RegisteredRule(rule=balancesBoundedByTotalSupply_preserve_explicit_transfer(address,uint256), ruleType=CustomPreservation(originalInv=CVLInvariant(cvlRange=ERC20.spec:115:1, id=balancesBoundedByTotalSupply, ruleType=spec.cvlast.SpecType$Single$FromUser$SpecFile@5436ad87, params=[address alice, address bob], exp=balanceOf(alice) + balanceOf(bob) <= to_mathint(totalSupply()), methodParamFilters=MethodParamFilters(cvlRange=unknownLocation, scope=(Spec file -> Invariant balancesBoundedByTotalSupply), methodParamToFilter={}), proof=CVLInvariantProof(preserved=[preserved ERC20.transfer(address recip, uint256 amount) in scope (Spec file -> Invariant balancesBoundedByTotalSupply -> Preserve block ERC20.transfer(address recip, uint256 amount)), preserved ERC20.transferFrom(address from, address to, uint256 amount) in scope (Spec file -> Invariant balancesBoundedByTotalSupply -> Preserve block ERC20.transferFrom(address from, address to, uint256 amount))]), scope=(Spec file -> Invariant balancesBoundedByTotalSupply), scopeId=7)), parentCVLDeclarationId=balancesBoundedByTotalSupply, isCounted=true): true,
	RegisteredRule(rule=balancesBoundedByTotalSupply_preserve_explicit_transferFrom(address,address,uint256), ruleType=CustomPreservation(originalInv=CVLInvariant(cvlRange=ERC20.spec:115:1, id=balancesBoundedByTotalSupply, ruleType=spec.cvlast.SpecType$Single$FromUser$SpecFile@5436ad87, params=[address alice, address bob], exp=balanceOf(alice) + balanceOf(bob) <= to_mathint(totalSupply()), methodParamFilters=MethodParamFilters(cvlRange=unknownLocation, scope=(Spec file -> Invariant balancesBoundedByTotalSupply), methodParamToFilter={}), proof=CVLInvariantProof(preserved=[preserved ERC20.transfer(address recip, uint256 amount) in scope (Spec file -> Invariant balancesBoundedByTotalSupply -> Preserve block ERC20.transfer(address recip, uint256 amount)), preserved ERC20.transferFrom(address from, address to, uint256 amount) in scope (Spec file -> Invariant balancesBoundedByTotalSupply -> Preserve block ERC20.transferFrom(address from, address to, uint256 amount))]), scope=(Spec file -> Invariant balancesBoundedByTotalSupply), scopeId=7)), parentCVLDeclarationId=balancesBoundedByTotalSupply, isCounted=true): true,
	RegisteredRule(rule=balancesBoundedByTotalSupply_preserve, ruleType=Preservation(originalInv=CVLInvariant(cvlRange=ERC20.spec:115:1, id=balancesBoundedByTotalSupply, ruleType=spec.cvlast.SpecType$Single$FromUser$SpecFile@5436ad87, params=[address alice, address bob], exp=balanceOf(alice) + balanceOf(bob) <= to_mathint(totalSupply()), methodParamFilters=MethodParamFilters(cvlRange=unknownLocation, scope=(Spec file -> Invariant balancesBoundedByTotalSupply), methodParamToFilter={}), proof=CVLInvariantProof(preserved=[preserved ERC20.transfer(address recip, uint256 amount) in scope (Spec file -> Invariant balancesBoundedByTotalSupply -> Preserve block ERC20.transfer(address recip, uint256 amount)), preserved ERC20.transferFrom(address from, address to, uint256 amount) in scope (Spec file -> Invariant balancesBoundedByTotalSupply -> Preserve block ERC20.transferFrom(address from, address to, uint256 amount))]), scope=(Spec file -> Invariant balancesBoundedByTotalSupply), scopeId=7)), parentCVLDeclarationId=balancesBoundedByTotalSupply, isCounted=true): true,
	RegisteredRule(rule=balancesBoundedByTotalSupply_instate, ruleType=Initialization(originalInv=CVLInvariant(cvlRange=ERC20.spec:115:1, id=balancesBoundedByTotalSupply, ruleType=spec.cvlast.SpecType$Single$FromUser$SpecFile@5436ad87, params=[address alice, address bob], exp=balanceOf(alice) + balanceOf(bob) <= to_mathint(totalSupply()), methodParamFilters=MethodParamFilters(cvlRange=unknownLocation, scope=(Spec file -> Invariant balancesBoundedByTotalSupply), methodParamToFilter={}), proof=CVLInvariantProof(preserved=[preserved ERC20.transfer(address recip, uint256 amount) in scope (Spec file -> Invariant balancesBoundedByTotalSupply -> Preserve block ERC20.transfer(address recip, uint256 amount)), preserved ERC20.transferFrom(address from, address to, uint256 amount) in scope (Spec file -> Invariant balancesBoundedByTotalSupply -> Preserve block ERC20.transferFrom(address from, address to, uint256 amount))]), scope=(Spec file -> Invariant balancesBoundedByTotalSupply), scopeId=7)), parentCVLDeclarationId=balancesBoundedByTotalSupply, isCounted=true): true,
	RegisteredRule(rule=balancesBoundedByTotalSupply_skipped_preserve_symbol(), ruleType=Skipped(originalInv=CVLInvariant(cvlRange=ERC20.spec:115:1, id=balancesBoundedByTotalSupply, ruleType=spec.cvlast.SpecType$Single$FromUser$SpecFile@5436ad87, params=[address alice, address bob], exp=balanceOf(alice) + balanceOf(bob) <= to_mathint(totalSupply()), methodParamFilters=MethodParamFilters(cvlRange=unknownLocation, scope=(Spec file -> Invariant balancesBoundedByTotalSupply), methodParamToFilter={}), proof=CVLInvariantProof(preserved=[preserved ERC20.transfer(address recip, uint256 amount) in scope (Spec file -> Invariant balancesBoundedByTotalSupply -> Preserve block ERC20.transfer(address recip, uint256 amount)), preserved ERC20.transferFrom(address from, address to, uint256 amount) in scope (Spec file -> Invariant balancesBoundedByTotalSupply -> Preserve block ERC20.transferFrom(address from, address to, uint256 amount))]), scope=(Spec file -> Invariant balancesBoundedByTotalSupply), scopeId=7)), parentCVLDeclarationId=balancesBoundedByTotalSupply, isCounted=true): true,
	RegisteredRule(rule=balancesBoundedByTotalSupply_skipped_preserve_name(), ruleType=Skipped(originalInv=CVLInvariant(cvlRange=ERC20.spec:115:1, id=balancesBoundedByTotalSupply, ruleType=spec.cvlast.SpecType$Single$FromUser$SpecFile@5436ad87, params=[address alice, address bob], exp=balanceOf(alice) + balanceOf(bob) <= to_mathint(totalSupply()), methodParamFilters=MethodParamFilters(cvlRange=unknownLocation, scope=(Spec file -> Invariant balancesBoundedByTotalSupply), methodParamToFilter={}), proof=CVLInvariantProof(preserved=[preserved ERC20.transfer(address recip, uint256 amount) in scope (Spec file -> Invariant balancesBoundedByTotalSupply -> Preserve block ERC20.transfer(address recip, uint256 amount)), preserved ERC20.transferFrom(address from, address to, uint256 amount) in scope (Spec file -> Invariant balancesBoundedByTotalSupply -> Preserve block ERC20.transferFrom(address from, address to, uint256 amount))]), scope=(Spec file -> Invariant balancesBoundedByTotalSupply), scopeId=7)), parentCVLDeclarationId=balancesBoundedByTotalSupply, isCounted=true): true,
	RegisteredRule(rule=balancesBoundedByTotalSupply_skipped_preserve__owner(), ruleType=Skipped(originalInv=CVLInvariant(cvlRange=ERC20.spec:115:1, id=balancesBoundedByTotalSupply, ruleType=spec.cvlast.SpecType$Single$FromUser$SpecFile@5436ad87, params=[address alice, address bob], exp=balanceOf(alice) + balanceOf(bob) <= to_mathint(totalSupply()), methodParamFilters=MethodParamFilters(cvlRange=unknownLocation, scope=(Spec file -> Invariant balancesBoundedByTotalSupply), methodParamToFilter={}), proof=CVLInvariantProof(preserved=[preserved ERC20.transfer(address recip, uint256 amount) in scope (Spec file -> Invariant balancesBoundedByTotalSupply -> Preserve block ERC20.transfer(address recip, uint256 amount)), preserved ERC20.transferFrom(address from, address to, uint256 amount) in scope (Spec file -> Invariant balancesBoundedByTotalSupply -> Preserve block ERC20.transferFrom(address from, address to, uint256 amount))]), scope=(Spec file -> Invariant balancesBoundedByTotalSupply), scopeId=7)), parentCVLDeclarationId=balancesBoundedByTotalSupply, isCounted=true): true,
	RegisteredRule(rule=balancesBoundedByTotalSupply_skipped_preserve_decimals(), ruleType=Skipped(originalInv=CVLInvariant(cvlRange=ERC20.spec:115:1, id=balancesBoundedByTotalSupply, ruleType=spec.cvlast.SpecType$Single$FromUser$SpecFile@5436ad87, params=[address alice, address bob], exp=balanceOf(alice) + balanceOf(bob) <= to_mathint(totalSupply()), methodParamFilters=MethodParamFilters(cvlRange=unknownLocation, scope=(Spec file -> Invariant balancesBoundedByTotalSupply), methodParamToFilter={}), proof=CVLInvariantProof(preserved=[preserved ERC20.transfer(address recip, uint256 amount) in scope (Spec file -> Invariant balancesBoundedByTotalSupply -> Preserve block ERC20.transfer(address recip, uint256 amount)), preserved ERC20.transferFrom(address from, address to, uint256 amount) in scope (Spec file -> Invariant balancesBoundedByTotalSupply -> Preserve block ERC20.transferFrom(address from, address to, uint256 amount))]), scope=(Spec file -> Invariant balancesBoundedByTotalSupply), scopeId=7)), parentCVLDeclarationId=balancesBoundedByTotalSupply, isCounted=true): true,
	RegisteredRule(rule=balancesBoundedByTotalSupply_skipped_preserve_balanceOf(address), ruleType=Skipped(originalInv=CVLInvariant(cvlRange=ERC20.spec:115:1, id=balancesBoundedByTotalSupply, ruleType=spec.cvlast.SpecType$Single$FromUser$SpecFile@5436ad87, params=[address alice, address bob], exp=balanceOf(alice) + balanceOf(bob) <= to_mathint(totalSupply()), methodParamFilters=MethodParamFilters(cvlRange=unknownLocation, scope=(Spec file -> Invariant balancesBoundedByTotalSupply), methodParamToFilter={}), proof=CVLInvariantProof(preserved=[preserved ERC20.transfer(address recip, uint256 amount) in scope (Spec file -> Invariant balancesBoundedByTotalSupply -> Preserve block ERC20.transfer(address recip, uint256 amount)), preserved ERC20.transferFrom(address from, address to, uint256 amount) in scope (Spec file -> Invariant balancesBoundedByTotalSupply -> Preserve block ERC20.transferFrom(address from, address to, uint256 amount))]), scope=(Spec file -> Invariant balancesBoundedByTotalSupply), scopeId=7)), parentCVLDeclarationId=balancesBoundedByTotalSupply, isCounted=true): true,
	RegisteredRule(rule=balancesBoundedByTotalSupply_skipped_preserve_totalSupply(), ruleType=Skipped(originalInv=CVLInvariant(cvlRange=ERC20.spec:115:1, id=balancesBoundedByTotalSupply, ruleType=spec.cvlast.SpecType$Single$FromUser$SpecFile@5436ad87, params=[address alice, address bob], exp=balanceOf(alice) + balanceOf(bob) <= to_mathint(totalSupply()), methodParamFilters=MethodParamFilters(cvlRange=unknownLocation, scope=(Spec file -> Invariant balancesBoundedByTotalSupply), methodParamToFilter={}), proof=CVLInvariantProof(preserved=[preserved ERC20.transfer(address recip, uint256 amount) in scope (Spec file -> Invariant balancesBoundedByTotalSupply -> Preserve block ERC20.transfer(address recip, uint256 amount)), preserved ERC20.transferFrom(address from, address to, uint256 amount) in scope (Spec file -> Invariant balancesBoundedByTotalSupply -> Preserve block ERC20.transferFrom(address from, address to, uint256 amount))]), scope=(Spec file -> Invariant balancesBoundedByTotalSupply), scopeId=7)), parentCVLDeclarationId=balancesBoundedByTotalSupply, isCounted=true): true,
	RegisteredRule(rule=balancesBoundedByTotalSupply_skipped_preserve_allowance(address,address), ruleType=Skipped(originalInv=CVLInvariant(cvlRange=ERC20.spec:115:1, id=balancesBoundedByTotalSupply, ruleType=spec.cvlast.SpecType$Single$FromUser$SpecFile@5436ad87, params=[address alice, address bob], exp=balanceOf(alice) + balanceOf(bob) <= to_mathint(totalSupply()), methodParamFilters=MethodParamFilters(cvlRange=unknownLocation, scope=(Spec file -> Invariant balancesBoundedByTotalSupply), methodParamToFilter={}), proof=CVLInvariantProof(preserved=[preserved ERC20.transfer(address recip, uint256 amount) in scope (Spec file -> Invariant balancesBoundedByTotalSupply -> Preserve block ERC20.transfer(address recip, uint256 amount)), preserved ERC20.transferFrom(address from, address to, uint256 amount) in scope (Spec file -> Invariant balancesBoundedByTotalSupply -> Preserve block ERC20.transferFrom(address from, address to, uint256 amount))]), scope=(Spec file -> Invariant balancesBoundedByTotalSupply), scopeId=7)), parentCVLDeclarationId=balancesBoundedByTotalSupply, isCounted=true): true,
	RegisteredRule(rule=totalSupplyIsSumOfBalances, ruleType=InvariantCheck(originalInv=CVLInvariant(cvlRange=ERC20.spec:141:1, id=totalSupplyIsSumOfBalances, ruleType=spec.cvlast.SpecType$Single$FromUser$SpecFile@5436ad87, params=[], exp=to_mathint(totalSupply()) == sum_of_balances, methodParamFilters=MethodParamFilters(cvlRange=unknownLocation, scope=(Spec file -> Invariant totalSupplyIsSumOfBalances), methodParamToFilter={}), proof=CVLInvariantProof(preserved=[]), scope=(Spec file -> Invariant totalSupplyIsSumOfBalances), scopeId=10)), parentCVLDeclarationId=null, isCounted=true): true,
	RegisteredRule(rule=totalSupplyIsSumOfBalances_preserve, ruleType=Preservation(originalInv=CVLInvariant(cvlRange=ERC20.spec:141:1, id=totalSupplyIsSumOfBalances, ruleType=spec.cvlast.SpecType$Single$FromUser$SpecFile@5436ad87, params=[], exp=to_mathint(totalSupply()) == sum_of_balances, methodParamFilters=MethodParamFilters(cvlRange=unknownLocation, scope=(Spec file -> Invariant totalSupplyIsSumOfBalances), methodParamToFilter={}), proof=CVLInvariantProof(preserved=[]), scope=(Spec file -> Invariant totalSupplyIsSumOfBalances), scopeId=10)), parentCVLDeclarationId=totalSupplyIsSumOfBalances, isCounted=true): true,
	RegisteredRule(rule=totalSupplyIsSumOfBalances_instate, ruleType=Initialization(originalInv=CVLInvariant(cvlRange=ERC20.spec:141:1, id=totalSupplyIsSumOfBalances, ruleType=spec.cvlast.SpecType$Single$FromUser$SpecFile@5436ad87, params=[], exp=to_mathint(totalSupply()) == sum_of_balances, methodParamFilters=MethodParamFilters(cvlRange=unknownLocation, scope=(Spec file -> Invariant totalSupplyIsSumOfBalances), methodParamToFilter={}), proof=CVLInvariantProof(preserved=[]), scope=(Spec file -> Invariant totalSupplyIsSumOfBalances), scopeId=10)), parentCVLDeclarationId=totalSupplyIsSumOfBalances, isCounted=true): true,
	RegisteredRule(rule=totalSupplyIsSumOfBalances_skipped_preserve_symbol(), ruleType=Skipped(originalInv=CVLInvariant(cvlRange=ERC20.spec:141:1, id=totalSupplyIsSumOfBalances, ruleType=spec.cvlast.SpecType$Single$FromUser$SpecFile@5436ad87, params=[], exp=to_mathint(totalSupply()) == sum_of_balances, methodParamFilters=MethodParamFilters(cvlRange=unknownLocation, scope=(Spec file -> Invariant totalSupplyIsSumOfBalances), methodParamToFilter={}), proof=CVLInvariantProof(preserved=[]), scope=(Spec file -> Invariant totalSupplyIsSumOfBalances), scopeId=10)), parentCVLDeclarationId=totalSupplyIsSumOfBalances, isCounted=true): true,
	RegisteredRule(rule=totalSupplyIsSumOfBalances_skipped_preserve_name(), ruleType=Skipped(originalInv=CVLInvariant(cvlRange=ERC20.spec:141:1, id=totalSupplyIsSumOfBalances, ruleType=spec.cvlast.SpecType$Single$FromUser$SpecFile@5436ad87, params=[], exp=to_mathint(totalSupply()) == sum_of_balances, methodParamFilters=MethodParamFilters(cvlRange=unknownLocation, scope=(Spec file -> Invariant totalSupplyIsSumOfBalances), methodParamToFilter={}), proof=CVLInvariantProof(preserved=[]), scope=(Spec file -> Invariant totalSupplyIsSumOfBalances), scopeId=10)), parentCVLDeclarationId=totalSupplyIsSumOfBalances, isCounted=true): true,
	RegisteredRule(rule=totalSupplyIsSumOfBalances_skipped_preserve__owner(), ruleType=Skipped(originalInv=CVLInvariant(cvlRange=ERC20.spec:141:1, id=totalSupplyIsSumOfBalances, ruleType=spec.cvlast.SpecType$Single$FromUser$SpecFile@5436ad87, params=[], exp=to_mathint(totalSupply()) == sum_of_balances, methodParamFilters=MethodParamFilters(cvlRange=unknownLocation, scope=(Spec file -> Invariant totalSupplyIsSumOfBalances), methodParamToFilter={}), proof=CVLInvariantProof(preserved=[]), scope=(Spec file -> Invariant totalSupplyIsSumOfBalances), scopeId=10)), parentCVLDeclarationId=totalSupplyIsSumOfBalances, isCounted=true): true,
	RegisteredRule(rule=totalSupplyIsSumOfBalances_skipped_preserve_decimals(), ruleType=Skipped(originalInv=CVLInvariant(cvlRange=ERC20.spec:141:1, id=totalSupplyIsSumOfBalances, ruleType=spec.cvlast.SpecType$Single$FromUser$SpecFile@5436ad87, params=[], exp=to_mathint(totalSupply()) == sum_of_balances, methodParamFilters=MethodParamFilters(cvlRange=unknownLocation, scope=(Spec file -> Invariant totalSupplyIsSumOfBalances), methodParamToFilter={}), proof=CVLInvariantProof(preserved=[]), scope=(Spec file -> Invariant totalSupplyIsSumOfBalances), scopeId=10)), parentCVLDeclarationId=totalSupplyIsSumOfBalances, isCounted=true): true,
	RegisteredRule(rule=totalSupplyIsSumOfBalances_skipped_preserve_balanceOf(address), ruleType=Skipped(originalInv=CVLInvariant(cvlRange=ERC20.spec:141:1, id=totalSupplyIsSumOfBalances, ruleType=spec.cvlast.SpecType$Single$FromUser$SpecFile@5436ad87, params=[], exp=to_mathint(totalSupply()) == sum_of_balances, methodParamFilters=MethodParamFilters(cvlRange=unknownLocation, scope=(Spec file -> Invariant totalSupplyIsSumOfBalances), methodParamToFilter={}), proof=CVLInvariantProof(preserved=[]), scope=(Spec file -> Invariant totalSupplyIsSumOfBalances), scopeId=10)), parentCVLDeclarationId=totalSupplyIsSumOfBalances, isCounted=true): true,
	RegisteredRule(rule=totalSupplyIsSumOfBalances_skipped_preserve_totalSupply(), ruleType=Skipped(originalInv=CVLInvariant(cvlRange=ERC20.spec:141:1, id=totalSupplyIsSumOfBalances, ruleType=spec.cvlast.SpecType$Single$FromUser$SpecFile@5436ad87, params=[], exp=to_mathint(totalSupply()) == sum_of_balances, methodParamFilters=MethodParamFilters(cvlRange=unknownLocation, scope=(Spec file -> Invariant totalSupplyIsSumOfBalances), methodParamToFilter={}), proof=CVLInvariantProof(preserved=[]), scope=(Spec file -> Invariant totalSupplyIsSumOfBalances), scopeId=10)), parentCVLDeclarationId=totalSupplyIsSumOfBalances, isCounted=true): true,
	RegisteredRule(rule=totalSupplyIsSumOfBalances_skipped_preserve_allowance(address,address), ruleType=Skipped(originalInv=CVLInvariant(cvlRange=ERC20.spec:141:1, id=totalSupplyIsSumOfBalances, ruleType=spec.cvlast.SpecType$Single$FromUser$SpecFile@5436ad87, params=[], exp=to_mathint(totalSupply()) == sum_of_balances, methodParamFilters=MethodParamFilters(cvlRange=unknownLocation, scope=(Spec file -> Invariant totalSupplyIsSumOfBalances), methodParamToFilter={}), proof=CVLInvariantProof(preserved=[]), scope=(Spec file -> Invariant totalSupplyIsSumOfBalances), scopeId=10)), parentCVLDeclarationId=totalSupplyIsSumOfBalances, isCounted=true): true,
	RegisteredRule(rule=envfreeFuncsStaticCheck, ruleType=spec.cvlast.SpecType$Group$StaticEnvFree@860ad929, parentCVLDeclarationId=null, isCounted=true): true,
	RegisteredRule(rule=transferFrom(address,address,uint256), ruleType=Static(contractFunction=ERC20.transferFrom(address sender, address recipient, uint256 amount) returns (bool)), parentCVLDeclarationId=envfreeFuncsStaticCheck, isCounted=true): true,
	RegisteredRule(rule=balanceOf(address), ruleType=Static(contractFunction=ERC20.balanceOf(address account) returns (uint256)), parentCVLDeclarationId=envfreeFuncsStaticCheck, isCounted=true): true,
	RegisteredRule(rule=totalSupply(), ruleType=Static(contractFunction=ERC20.totalSupply() returns (uint256)), parentCVLDeclarationId=envfreeFuncsStaticCheck, isCounted=true): true,
	RegisteredRule(rule=allowance(address,address), ruleType=Static(contractFunction=ERC20.allowance(address owner, address spender) returns (uint256)), parentCVLDeclarationId=envfreeFuncsStaticCheck, isCounted=true): true,
	RegisteredRule(rule=transferFrom(address,address,uint256), ruleType=Preservation(originalInv=CVLInvariant(cvlRange=ERC20.spec:141:1, id=totalSupplyIsSumOfBalances, ruleType=spec.cvlast.SpecType$Single$FromUser$SpecFile@5436ad87, params=[], exp=to_mathint(totalSupply()) == sum_of_balances, methodParamFilters=MethodParamFilters(cvlRange=unknownLocation, scope=(Spec file -> Invariant totalSupplyIsSumOfBalances), methodParamToFilter={}), proof=CVLInvariantProof(preserved=[]), scope=(Spec file -> Invariant totalSupplyIsSumOfBalances), scopeId=10)), parentCVLDeclarationId=totalSupplyIsSumOfBalances_preserve, isCounted=true): true,
	RegisteredRule(rule=balanceOf(address), ruleType=spec.cvlast.SpecType$Single$FromUser$SpecFile@5436ad87, parentCVLDeclarationId=onlyHolderCanChangeAllowance, isCounted=true): true,
	RegisteredRule(rule=increaseAllowance(address,uint256), ruleType=spec.cvlast.SpecType$Single$FromUser$SpecFile@5436ad87, parentCVLDeclarationId=onlyHolderCanChangeAllowance, isCounted=true): true,
	RegisteredRule(rule=deposit(), ruleType=Preservation(originalInv=CVLInvariant(cvlRange=ERC20.spec:141:1, id=totalSupplyIsSumOfBalances, ruleType=spec.cvlast.SpecType$Single$FromUser$SpecFile@5436ad87, params=[], exp=to_mathint(totalSupply()) == sum_of_balances, methodParamFilters=MethodParamFilters(cvlRange=unknownLocation, scope=(Spec file -> Invariant totalSupplyIsSumOfBalances), methodParamToFilter={}), proof=CVLInvariantProof(preserved=[]), scope=(Spec file -> Invariant totalSupplyIsSumOfBalances), scopeId=10)), parentCVLDeclarationId=totalSupplyIsSumOfBalances_preserve, isCounted=true): true,
	RegisteredRule(rule=allowance(address,address), ruleType=spec.cvlast.SpecType$Single$FromUser$SpecFile@5436ad87, parentCVLDeclarationId=onlyHolderCanChangeAllowance, isCounted=true): true,
	RegisteredRule(rule=increaseAllowance(address,uint256), ruleType=Preservation(originalInv=CVLInvariant(cvlRange=ERC20.spec:141:1, id=totalSupplyIsSumOfBalances, ruleType=spec.cvlast.SpecType$Single$FromUser$SpecFile@5436ad87, params=[], exp=to_mathint(totalSupply()) == sum_of_balances, methodParamFilters=MethodParamFilters(cvlRange=unknownLocation, scope=(Spec file -> Invariant totalSupplyIsSumOfBalances), methodParamToFilter={}), proof=CVLInvariantProof(preserved=[]), scope=(Spec file -> Invariant totalSupplyIsSumOfBalances), scopeId=10)), parentCVLDeclarationId=totalSupplyIsSumOfBalances_preserve, isCounted=true): true,
	RegisteredRule(rule=mint(address,uint256), ruleType=spec.cvlast.SpecType$Single$FromUser$SpecFile@5436ad87, parentCVLDeclarationId=onlyHolderCanChangeAllowance, isCounted=true): true,
	RegisteredRule(rule=mint(address,uint256), ruleType=Preservation(originalInv=CVLInvariant(cvlRange=ERC20.spec:141:1, id=totalSupplyIsSumOfBalances, ruleType=spec.cvlast.SpecType$Single$FromUser$SpecFile@5436ad87, params=[], exp=to_mathint(totalSupply()) == sum_of_balances, methodParamFilters=MethodParamFilters(cvlRange=unknownLocation, scope=(Spec file -> Invariant totalSupplyIsSumOfBalances), methodParamToFilter={}), proof=CVLInvariantProof(preserved=[]), scope=(Spec file -> Invariant totalSupplyIsSumOfBalances), scopeId=10)), parentCVLDeclarationId=totalSupplyIsSumOfBalances_preserve, isCounted=true): true,
	RegisteredRule(rule=deposit(), ruleType=Preservation(originalInv=CVLInvariant(cvlRange=ERC20.spec:115:1, id=balancesBoundedByTotalSupply, ruleType=spec.cvlast.SpecType$Single$FromUser$SpecFile@5436ad87, params=[address alice, address bob], exp=balanceOf(alice) + balanceOf(bob) <= to_mathint(totalSupply()), methodParamFilters=MethodParamFilters(cvlRange=unknownLocation, scope=(Spec file -> Invariant balancesBoundedByTotalSupply), methodParamToFilter={}), proof=CVLInvariantProof(preserved=[preserved ERC20.transfer(address recip, uint256 amount) in scope (Spec file -> Invariant balancesBoundedByTotalSupply -> Preserve block ERC20.transfer(address recip, uint256 amount)), preserved ERC20.transferFrom(address from, address to, uint256 amount) in scope (Spec file -> Invariant balancesBoundedByTotalSupply -> Preserve block ERC20.transferFrom(address from, address to, uint256 amount))]), scope=(Spec file -> Invariant balancesBoundedByTotalSupply), scopeId=7)), parentCVLDeclarationId=balancesBoundedByTotalSupply_preserve, isCounted=true): true,
	RegisteredRule(rule=burn(address,uint256), ruleType=Preservation(originalInv=CVLInvariant(cvlRange=ERC20.spec:141:1, id=totalSupplyIsSumOfBalances, ruleType=spec.cvlast.SpecType$Single$FromUser$SpecFile@5436ad87, params=[], exp=to_mathint(totalSupply()) == sum_of_balances, methodParamFilters=MethodParamFilters(cvlRange=unknownLocation, scope=(Spec file -> Invariant totalSupplyIsSumOfBalances), methodParamToFilter={}), proof=CVLInvariantProof(preserved=[]), scope=(Spec file -> Invariant totalSupplyIsSumOfBalances), scopeId=10)), parentCVLDeclarationId=totalSupplyIsSumOfBalances_preserve, isCounted=true): true,
	RegisteredRule(rule=increaseAllowance(address,uint256), ruleType=Preservation(originalInv=CVLInvariant(cvlRange=ERC20.spec:115:1, id=balancesBoundedByTotalSupply, ruleType=spec.cvlast.SpecType$Single$FromUser$SpecFile@5436ad87, params=[address alice, address bob], exp=balanceOf(alice) + balanceOf(bob) <= to_mathint(totalSupply()), methodParamFilters=MethodParamFilters(cvlRange=unknownLocation, scope=(Spec file -> Invariant balancesBoundedByTotalSupply), methodParamToFilter={}), proof=CVLInvariantProof(preserved=[preserved ERC20.transfer(address recip, uint256 amount) in scope (Spec file -> Invariant balancesBoundedByTotalSupply -> Preserve block ERC20.transfer(address recip, uint256 amount)), preserved ERC20.transferFrom(address from, address to, uint256 amount) in scope (Spec file -> Invariant balancesBoundedByTotalSupply -> Preserve block ERC20.transferFrom(address from, address to, uint256 amount))]), scope=(Spec file -> Invariant balancesBoundedByTotalSupply), scopeId=7)), parentCVLDeclarationId=balancesBoundedByTotalSupply_preserve, isCounted=true): true,
	RegisteredRule(rule=withdraw(uint256), ruleType=Preservation(originalInv=CVLInvariant(cvlRange=ERC20.spec:141:1, id=totalSupplyIsSumOfBalances, ruleType=spec.cvlast.SpecType$Single$FromUser$SpecFile@5436ad87, params=[], exp=to_mathint(totalSupply()) == sum_of_balances, methodParamFilters=MethodParamFilters(cvlRange=unknownLocation, scope=(Spec file -> Invariant totalSupplyIsSumOfBalances), methodParamToFilter={}), proof=CVLInvariantProof(preserved=[]), scope=(Spec file -> Invariant totalSupplyIsSumOfBalances), scopeId=10)), parentCVLDeclarationId=totalSupplyIsSumOfBalances_preserve, isCounted=true): true,
	RegisteredRule(rule=transferFrom(address,address,uint256), ruleType=spec.cvlast.SpecType$Single$FromUser$SpecFile@5436ad87, parentCVLDeclarationId=onlyHolderCanChangeAllowance, isCounted=true): true,
	RegisteredRule(rule=decreaseAllowance(address,uint256), ruleType=Preservation(originalInv=CVLInvariant(cvlRange=ERC20.spec:141:1, id=totalSupplyIsSumOfBalances, ruleType=spec.cvlast.SpecType$Single$FromUser$SpecFile@5436ad87, params=[], exp=to_mathint(totalSupply()) == sum_of_balances, methodParamFilters=MethodParamFilters(cvlRange=unknownLocation, scope=(Spec file -> Invariant totalSupplyIsSumOfBalances), methodParamToFilter={}), proof=CVLInvariantProof(preserved=[]), scope=(Spec file -> Invariant totalSupplyIsSumOfBalances), scopeId=10)), parentCVLDeclarationId=totalSupplyIsSumOfBalances_preserve, isCounted=true): true,
	RegisteredRule(rule=mint(address,uint256), ruleType=Preservation(originalInv=CVLInvariant(cvlRange=ERC20.spec:115:1, id=balancesBoundedByTotalSupply, ruleType=spec.cvlast.SpecType$Single$FromUser$SpecFile@5436ad87, params=[address alice, address bob], exp=balanceOf(alice) + balanceOf(bob) <= to_mathint(totalSupply()), methodParamFilters=MethodParamFilters(cvlRange=unknownLocation, scope=(Spec file -> Invariant balancesBoundedByTotalSupply), methodParamToFilter={}), proof=CVLInvariantProof(preserved=[preserved ERC20.transfer(address recip, uint256 amount) in scope (Spec file -> Invariant balancesBoundedByTotalSupply -> Preserve block ERC20.transfer(address recip, uint256 amount)), preserved ERC20.transferFrom(address from, address to, uint256 amount) in scope (Spec file -> Invariant balancesBoundedByTotalSupply -> Preserve block ERC20.transferFrom(address from, address to, uint256 amount))]), scope=(Spec file -> Invariant balancesBoundedByTotalSupply), scopeId=7)), parentCVLDeclarationId=balancesBoundedByTotalSupply_preserve, isCounted=true): true,
	RegisteredRule(rule=burn(address,uint256), ruleType=spec.cvlast.SpecType$Single$FromUser$SpecFile@5436ad87, parentCVLDeclarationId=onlyHolderCanChangeAllowance, isCounted=true): true,
	RegisteredRule(rule=withdraw(uint256), ruleType=Preservation(originalInv=CVLInvariant(cvlRange=ERC20.spec:115:1, id=balancesBoundedByTotalSupply, ruleType=spec.cvlast.SpecType$Single$FromUser$SpecFile@5436ad87, params=[address alice, address bob], exp=balanceOf(alice) + balanceOf(bob) <= to_mathint(totalSupply()), methodParamFilters=MethodParamFilters(cvlRange=unknownLocation, scope=(Spec file -> Invariant balancesBoundedByTotalSupply), methodParamToFilter={}), proof=CVLInvariantProof(preserved=[preserved ERC20.transfer(address recip, uint256 amount) in scope (Spec file -> Invariant balancesBoundedByTotalSupply -> Preserve block ERC20.transfer(address recip, uint256 amount)), preserved ERC20.transferFrom(address from, address to, uint256 amount) in scope (Spec file -> Invariant balancesBoundedByTotalSupply -> Preserve block ERC20.transferFrom(address from, address to, uint256 amount))]), scope=(Spec file -> Invariant balancesBoundedByTotalSupply), scopeId=7)), parentCVLDeclarationId=balancesBoundedByTotalSupply_preserve, isCounted=true): true,
	RegisteredRule(rule=transfer(address,uint256), ruleType=Preservation(originalInv=CVLInvariant(cvlRange=ERC20.spec:141:1, id=totalSupplyIsSumOfBalances, ruleType=spec.cvlast.SpecType$Single$FromUser$SpecFile@5436ad87, params=[], exp=to_mathint(totalSupply()) == sum_of_balances, methodParamFilters=MethodParamFilters(cvlRange=unknownLocation, scope=(Spec file -> Invariant totalSupplyIsSumOfBalances), methodParamToFilter={}), proof=CVLInvariantProof(preserved=[]), scope=(Spec file -> Invariant totalSupplyIsSumOfBalances), scopeId=10)), parentCVLDeclarationId=totalSupplyIsSumOfBalances_preserve, isCounted=true): true,
	RegisteredRule(rule=approve(address,uint256), ruleType=Preservation(originalInv=CVLInvariant(cvlRange=ERC20.spec:141:1, id=totalSupplyIsSumOfBalances, ruleType=spec.cvlast.SpecType$Single$FromUser$SpecFile@5436ad87, params=[], exp=to_mathint(totalSupply()) == sum_of_balances, methodParamFilters=MethodParamFilters(cvlRange=unknownLocation, scope=(Spec file -> Invariant totalSupplyIsSumOfBalances), methodParamToFilter={}), proof=CVLInvariantProof(preserved=[]), scope=(Spec file -> Invariant totalSupplyIsSumOfBalances), scopeId=10)), parentCVLDeclarationId=totalSupplyIsSumOfBalances_preserve, isCounted=true): true,
	RegisteredRule(rule=burn(address,uint256), ruleType=Preservation(originalInv=CVLInvariant(cvlRange=ERC20.spec:115:1, id=balancesBoundedByTotalSupply, ruleType=spec.cvlast.SpecType$Single$FromUser$SpecFile@5436ad87, params=[address alice, address bob], exp=balanceOf(alice) + balanceOf(bob) <= to_mathint(totalSupply()), methodParamFilters=MethodParamFilters(cvlRange=unknownLocation, scope=(Spec file -> Invariant balancesBoundedByTotalSupply), methodParamToFilter={}), proof=CVLInvariantProof(preserved=[preserved ERC20.transfer(address recip, uint256 amount) in scope (Spec file -> Invariant balancesBoundedByTotalSupply -> Preserve block ERC20.transfer(address recip, uint256 amount)), preserved ERC20.transferFrom(address from, address to, uint256 amount) in scope (Spec file -> Invariant balancesBoundedByTotalSupply -> Preserve block ERC20.transferFrom(address from, address to, uint256 amount))]), scope=(Spec file -> Invariant balancesBoundedByTotalSupply), scopeId=7)), parentCVLDeclarationId=balancesBoundedByTotalSupply_preserve, isCounted=true): true,
	RegisteredRule(rule=decreaseAllowance(address,uint256), ruleType=spec.cvlast.SpecType$Single$FromUser$SpecFile@5436ad87, parentCVLDeclarationId=onlyHolderCanChangeAllowance, isCounted=true): true,
	RegisteredRule(rule=transfer(address,uint256), ruleType=spec.cvlast.SpecType$Single$FromUser$SpecFile@5436ad87, parentCVLDeclarationId=onlyHolderCanChangeAllowance, isCounted=true): true,
	RegisteredRule(rule=decreaseAllowance(address,uint256), ruleType=Preservation(originalInv=CVLInvariant(cvlRange=ERC20.spec:115:1, id=balancesBoundedByTotalSupply, ruleType=spec.cvlast.SpecType$Single$FromUser$SpecFile@5436ad87, params=[address alice, address bob], exp=balanceOf(alice) + balanceOf(bob) <= to_mathint(totalSupply()), methodParamFilters=MethodParamFilters(cvlRange=unknownLocation, scope=(Spec file -> Invariant balancesBoundedByTotalSupply), methodParamToFilter={}), proof=CVLInvariantProof(preserved=[preserved ERC20.transfer(address recip, uint256 amount) in scope (Spec file -> Invariant balancesBoundedByTotalSupply -> Preserve block ERC20.transfer(address recip, uint256 amount)), preserved ERC20.transferFrom(address from, address to, uint256 amount) in scope (Spec file -> Invariant balancesBoundedByTotalSupply -> Preserve block ERC20.transferFrom(address from, address to, uint256 amount))]), scope=(Spec file -> Invariant balancesBoundedByTotalSupply), scopeId=7)), parentCVLDeclarationId=balancesBoundedByTotalSupply_preserve, isCounted=true): true,
	RegisteredRule(rule=approve(address,uint256), ruleType=spec.cvlast.SpecType$Single$FromUser$SpecFile@5436ad87, parentCVLDeclarationId=onlyHolderCanChangeAllowance, isCounted=true): true,
	RegisteredRule(rule=name(), ruleType=spec.cvlast.SpecType$Single$FromUser$SpecFile@5436ad87, parentCVLDeclarationId=onlyHolderCanChangeAllowance, isCounted=true): true,
	RegisteredRule(rule=withdraw(uint256), ruleType=spec.cvlast.SpecType$Single$FromUser$SpecFile@5436ad87, parentCVLDeclarationId=onlyHolderCanChangeAllowance, isCounted=true): true,
	RegisteredRule(rule=approve(address,uint256), ruleType=Preservation(originalInv=CVLInvariant(cvlRange=ERC20.spec:115:1, id=balancesBoundedByTotalSupply, ruleType=spec.cvlast.SpecType$Single$FromUser$SpecFile@5436ad87, params=[address alice, address bob], exp=balanceOf(alice) + balanceOf(bob) <= to_mathint(totalSupply()), methodParamFilters=MethodParamFilters(cvlRange=unknownLocation, scope=(Spec file -> Invariant balancesBoundedByTotalSupply), methodParamToFilter={}), proof=CVLInvariantProof(preserved=[preserved ERC20.transfer(address recip, uint256 amount) in scope (Spec file -> Invariant balancesBoundedByTotalSupply -> Preserve block ERC20.transfer(address recip, uint256 amount)), preserved ERC20.transferFrom(address from, address to, uint256 amount) in scope (Spec file -> Invariant balancesBoundedByTotalSupply -> Preserve block ERC20.transferFrom(address from, address to, uint256 amount))]), scope=(Spec file -> Invariant balancesBoundedByTotalSupply), scopeId=7)), parentCVLDeclarationId=balancesBoundedByTotalSupply_preserve, isCounted=true): true,
	RegisteredRule(rule=totalSupply(), ruleType=spec.cvlast.SpecType$Single$FromUser$SpecFile@5436ad87, parentCVLDeclarationId=onlyHolderCanChangeAllowance, isCounted=true): true,
	RegisteredRule(rule=decimals(), ruleType=spec.cvlast.SpecType$Single$FromUser$SpecFile@5436ad87, parentCVLDeclarationId=onlyHolderCanChangeAllowance, isCounted=true): true,
	RegisteredRule(rule=deposit(), ruleType=spec.cvlast.SpecType$Single$FromUser$SpecFile@5436ad87, parentCVLDeclarationId=onlyHolderCanChangeAllowance, isCounted=true): true,
	RegisteredRule(rule=symbol(), ruleType=spec.cvlast.SpecType$Single$FromUser$SpecFile@5436ad87, parentCVLDeclarationId=onlyHolderCanChangeAllowance, isCounted=true): true,
	RegisteredRule(rule=_owner(), ruleType=spec.cvlast.SpecType$Single$FromUser$SpecFile@5436ad87, parentCVLDeclarationId=onlyHolderCanChangeAllowance, isCounted=true): true
}