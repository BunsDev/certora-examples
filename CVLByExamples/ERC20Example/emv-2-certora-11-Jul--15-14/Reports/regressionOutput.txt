Environment variable 'jobId' is empty; using jobId e695306045a64c4e87fceab332bb9572
Stream for topic CVT had an exception and will not be available
AWS credentials could not be loaded
Stream for topic Fuzzer had an exception and will not be available
AWS credentials could not be loaded
Stream for topic Rule had an exception and will not be available
AWS credentials could not be loaded
Memory splitting of ERC20-balanceOf(address) succeeded
Memory splitting of ERC20-approve(address,uint256) succeeded
Memory splitting of ERC20-mint(address,uint256) succeeded
Memory splitting of ERC20-burn(address,uint256) succeeded
Memory splitting of ERC20-decreaseAllowance(address,uint256) succeeded
Memory splitting of ERC20-increaseAllowance(address,uint256) succeeded
Memory splitting of ERC20-transfer(address,uint256) succeeded
Memory splitting of ERC20-withdraw(uint256) succeeded
Memory splitting of ERC20-totalSupply() succeeded
Memory splitting of ERC20-_owner() succeeded
Memory splitting of ERC20-deposit() succeeded
Memory splitting of ERC20-decimals() succeeded
Memory splitting of ERC20-allowance(address,address) succeeded
Memory splitting of ERC20-transferFrom(address,address,uint256) succeeded
Memory splitting of ERC20-symbol() succeeded
Memory splitting of ERC20-name() succeeded
Created a meta slot tacS!ce4604a0000000000000000000000003!StructAccess_offset0_base.MapAccess_base.Root_slot0
Created a meta slot tacS!ce4604a0000000000000000000000003!StructAccess_offset0_base.MapAccess_base.StructAccess_offset0_base.MapAccess_base.Root_slot1
Created a meta slot tacS!ce4604a0000000000000000000000003!StructAccess_offset0_base.MapAccess_base.StructAccess_offset0_base.MapAccess_base.Root_slot1
Created a meta slot tacS!ce4604a0000000000000000000000003!StructAccess_offset0_base.MapAccess_base.Root_slot0
Created a meta slot tacS!ce4604a0000000000000000000000003!StructAccess_offset0_base.MapAccess_base.Root_slot0
Created a meta slot tacS!ce4604a0000000000000000000000003!3!0
Created a meta slot tacS!ce4604a0000000000000000000000003!2
Created a meta slot tacS!ce4604a0000000000000000000000003!StructAccess_offset0_base.MapAccess_base.Root_slot0
Created a meta slot tacS!ce4604a0000000000000000000000003!StructAccess_offset0_base.MapAccess_base.StructAccess_offset0_base.MapAccess_base.Root_slot1
Created a meta slot tacS!ce4604a0000000000000000000000003!StructAccess_offset0_base.MapAccess_base.Root_slot0
Created a meta slot tacS!ce4604a0000000000000000000000003!StructAccess_offset0_base.MapAccess_base.StructAccess_offset0_base.MapAccess_base.Root_slot1
Created a meta slot tacS!ce4604a0000000000000000000000003!StructAccess_offset0_base.MapAccess_base.Root_slot0
Created a meta slot tacS!ce4604a0000000000000000000000003!2
Created a meta slot tacS!ce4604a0000000000000000000000003!3!0
Created a meta slot tacS!ce4604a0000000000000000000000003!2
Created a meta slot tacS!ce4604a0000000000000000000000003!StructAccess_offset0_base.MapAccess_base.Root_slot0
Created a meta slot tacS!ce4604a0000000000000000000000003!3!0
Created a meta slot tacS!ce4604a0000000000000000000000003!StructAccess_offset0_base.MapAccess_base.StructAccess_offset0_base.MapAccess_base.Root_slot1

Guessed an unroll constant for a loop of null, while global unroll const is 1
Guessed an unroll constant for a loop of null, while global unroll const is 1
Artifact output.json already registered in REPORTS
Artifact output.json already registered in REPORTS
Artifact output.json already registered in REPORTS
Found variables used before being initialized in transferFromSpec. Enable info logs for DSA
Found variables used before being initialized in transferFromDoesntRevert. Enable info logs for DSA
Found variables used before being initialized in transferFromReverts. Enable info logs for DSA
dumping codeMap "PresolverRule-transferFromReverts" in html format, but the file name "PresolverRule-transferFromReverts" is lacking the `.html` suffix. Appending it and dumping that file.
dumping codeMap "PresolverRule-transferFromSpec" in html format, but the file name "PresolverRule-transferFromSpec" is lacking the `.html` suffix. Appending it and dumping that file.
dumping codeMap "PresolverRule-transferFromDoesntRevert" in html format, but the file name "PresolverRule-transferFromDoesntRevert" is lacking the `.html` suffix. Appending it and dumping that file.
Diversification did not produce statistics.
Diversification did not produce statistics.
Diversification did not produce statistics.
marking potential over-/underflowing expression class vc.data.TACExpr$BinOp$Sub with 'will not wrap' annotation
marking potential over-/underflowing expression class vc.data.TACExpr$BinOp$Sub with 'will not wrap' annotation
marking potential over-/underflowing expression class vc.data.TACExpr$BinOp$Sub with 'will not wrap' annotation
marking potential over-/underflowing expression class vc.data.TACExpr$BinOp$Sub with 'will not wrap' annotation
marking potential over-/underflowing expression class vc.data.TACExpr$BinOp$Sub with 'will not wrap' annotation
Proved that add can't overflow for bound 115792089237316195423570985008687907853269984665640564039457584007913129639935, removing 1 check
marking potential over-/underflowing expression class vc.data.TACExpr$Vec$Add$Binary with 'will not wrap' annotation
there already is a replacement registered in this PatchingProgram for pointer "CmdPointer(block=0_0_0_10_0_0, pos=191)", only one replacement is allowed per pointer
marking potential over-/underflowing expression class vc.data.TACExpr$BinOp$Sub with 'will not wrap' annotation
Total time for contract: 1 seconds ; Split time: 0 seconds ; Number of problems: 1 ; Solver time : 1 seconds
Total time for contract: 1 seconds ; Split time: 0 seconds ; Number of problems: 1 ; Solver time : 1 seconds
Total time for contract: 1 seconds ; Split time: 0 seconds ; Number of problems: 1 ; Solver time : 1 seconds
Violated: transferFromDoesntRevert
transferFromDoesntRevert: A property is violated
Violated: transferFromSpec
transferFromSpec: A property is violated
Violated: transferFromReverts
transferFromReverts: A property is violated
The names of the local variables are []
The names of the local variables are []
The names of the local variables are []
marking potential over-/underflowing expression class vc.data.TACExpr$BinOp$Sub with 'will not wrap' annotation
marking potential over-/underflowing expression class vc.data.TACExpr$BinOp$Sub with 'will not wrap' annotation
marking potential over-/underflowing expression class vc.data.TACExpr$BinOp$Sub with 'will not wrap' annotation
marking potential over-/underflowing expression class vc.data.TACExpr$BinOp$Sub with 'will not wrap' annotation
marking potential over-/underflowing expression class vc.data.TACExpr$BinOp$Sub with 'will not wrap' annotation
marking potential over-/underflowing expression class vc.data.TACExpr$BinOp$Sub with 'will not wrap' annotation
Proved that add can't overflow for bound 115792089237316195423570985008687907853269984665640564039457584007913129639935, removing 1 check
marking potential over-/underflowing expression class vc.data.TACExpr$Vec$Add$Binary with 'will not wrap' annotation
there already is a replacement registered in this PatchingProgram for pointer "CmdPointer(block=0_0_0_11_0_0, pos=191)", only one replacement is allowed per pointer
ERC20=ERC20 (0x2711)
ERC20=ERC20 (0x2711)
ERC20=ERC20 (0x2711)
Artifact FinalResults.html already registered in REPORTS
ERC20=ERC20 (0x2711)
ERC20=ERC20 (0x2711)
Artifact FinalResults.html already registered in REPORTS
marking potential over-/underflowing expression class vc.data.TACExpr$BinOp$Sub with 'will not wrap' annotation
marking potential over-/underflowing expression class vc.data.TACExpr$BinOp$Sub with 'will not wrap' annotation
ERC20=ERC20 (0x2711)
marking potential over-/underflowing expression class vc.data.TACExpr$BinOp$Sub with 'will not wrap' annotation
Artifact FinalResults.html already registered in REPORTS
marking potential over-/underflowing expression class vc.data.TACExpr$BinOp$Sub with 'will not wrap' annotation
marking potential over-/underflowing expression class vc.data.TACExpr$BinOp$Sub with 'will not wrap' annotation
marking potential over-/underflowing expression class vc.data.TACExpr$BinOp$Sub with 'will not wrap' annotation
marking potential over-/underflowing expression class vc.data.TACExpr$BinOp$Sub with 'will not wrap' annotation
Proved that add can't overflow for bound 115792089237316195423570985008687907853269984665640564039457584007913129639935, removing 1 check
Artifact output.json already registered in REPORTS
marking potential over-/underflowing expression class vc.data.TACExpr$Vec$Add$Binary with 'will not wrap' annotation
there already is a replacement registered in this PatchingProgram for pointer "CmdPointer(block=0_0_0_8_0_0, pos=201)", only one replacement is allowed per pointer
Found variables used before being initialized in transferSpec. Enable info logs for DSA
Artifact output.json already registered in REPORTS
Found variables used before being initialized in balancesBoundedByTotalSupply_preserve_explicit_transfer(address,uint256). Enable info logs for DSA
Artifact output.json already registered in REPORTS
Found variables used before being initialized in totalSupplyIsSumOfBalances_preserve-transferFrom(address,address,uint256). Enable info logs for DSA
Artifact output.json already registered in REPORTS
Found variables used before being initialized in transferDoesntRevert. Enable info logs for DSA
marking potential over-/underflowing expression class vc.data.TACExpr$BinOp$Sub with 'will not wrap' annotation
marking potential over-/underflowing expression class vc.data.TACExpr$BinOp$Sub with 'will not wrap' annotation
marking potential over-/underflowing expression class vc.data.TACExpr$BinOp$Sub with 'will not wrap' annotation
marking potential over-/underflowing expression class vc.data.TACExpr$BinOp$Sub with 'will not wrap' annotation
marking potential over-/underflowing expression class vc.data.TACExpr$BinOp$Sub with 'will not wrap' annotation
marking potential over-/underflowing expression class vc.data.TACExpr$BinOp$Sub with 'will not wrap' annotation
marking potential over-/underflowing expression class vc.data.TACExpr$BinOp$Sub with 'will not wrap' annotation
marking potential over-/underflowing expression class vc.data.TACExpr$BinOp$Sub with 'will not wrap' annotation
Artifact output.json already registered in REPORTS
Found variables used before being initialized in balancesBoundedByTotalSupply_instate. Enable info logs for DSA
Artifact output.json already registered in REPORTS
Found variables used before being initialized in onlyHolderCanChangeAllowance-balanceOf(address). Enable info logs for DSA
Artifact output.json already registered in REPORTS
dumping codeMap "PresolverRule-totalSupplyIsSumOfBalances_preserve-transferFrom(address,address,uint256)" in html format, but the file name "PresolverRule-totalSupplyIsSumOfBalances_preserve-transferFrom(address,address,uint256)" is lacking the `.html` suffix. Appending it and dumping that file.
dumping codeMap "PresolverRule-transferSpec" in html format, but the file name "PresolverRule-transferSpec" is lacking the `.html` suffix. Appending it and dumping that file.
Found variables used before being initialized in transferReverts. Enable info logs for DSA
dumping codeMap "PresolverRule-transferDoesntRevert" in html format, but the file name "PresolverRule-transferDoesntRevert" is lacking the `.html` suffix. Appending it and dumping that file.
dumping codeMap "PresolverRule-balancesBoundedByTotalSupply_instate" in html format, but the file name "PresolverRule-balancesBoundedByTotalSupply_instate" is lacking the `.html` suffix. Appending it and dumping that file.
dumping codeMap "PresolverRule-balancesBoundedByTotalSupply_preserve_explicit_transfer(address,uint256)" in html format, but the file name "PresolverRule-balancesBoundedByTotalSupply_preserve_explicit_transfer(address,uint256)" is lacking the `.html` suffix. Appending it and dumping that file.
dumping codeMap "PresolverRule-transferReverts" in html format, but the file name "PresolverRule-transferReverts" is lacking the `.html` suffix. Appending it and dumping that file.
marking potential over-/underflowing expression class vc.data.TACExpr$BinOp$Sub with 'will not wrap' annotation
marking potential over-/underflowing expression class vc.data.TACExpr$BinOp$Sub with 'will not wrap' annotation
Proved that add can't overflow for bound 115792089237316195423570985008687907853269984665640564039457584007913129639935, removing 1 check
marking potential over-/underflowing expression class vc.data.TACExpr$Vec$Add$Binary with 'will not wrap' annotation
there already is a replacement registered in this PatchingProgram for pointer "CmdPointer(block=0_0_0_6_0_0, pos=85)", only one replacement is allowed per pointer
marking potential over-/underflowing expression class vc.data.TACExpr$BinOp$Sub with 'will not wrap' annotation
dumping codeMap "PresolverRule-onlyHolderCanChangeAllowance-balanceOf(address)" in html format, but the file name "PresolverRule-onlyHolderCanChangeAllowance-balanceOf(address)" is lacking the `.html` suffix. Appending it and dumping that file.
Artifact output.json already registered in REPORTS
Found variables used before being initialized in onlyHolderCanChangeAllowance-increaseAllowance(address,uint256). Enable info logs for DSA
Diversification did not produce statistics.
Total time for contract: 2 seconds ; Split time: 0 seconds ; Number of problems: 1 ; Solver time : 2 seconds
Verified: totalSupplyIsSumOfBalances_preserve-transferFrom(address,address,uint256)
totalSupplyIsSumOfBalances_preserve-transferFrom(address,address,uint256): Properties successfully verified on all inputs
dumping codeMap "PresolverRule-onlyHolderCanChangeAllowance-increaseAllowance(address,uint256)" in html format, but the file name "PresolverRule-onlyHolderCanChangeAllowance-increaseAllowance(address,uint256)" is lacking the `.html` suffix. Appending it and dumping that file.
Diversification did not produce statistics.
Total time for contract: 2 seconds ; Split time: 0 seconds ; Number of problems: 1 ; Solver time : 2 seconds
Verified: balancesBoundedByTotalSupply_instate
balancesBoundedByTotalSupply_instate: Properties successfully verified on all inputs
Diversification did not produce statistics.
Total time for contract: 3 seconds ; Split time: 0 seconds ; Number of problems: 1 ; Solver time : 3 seconds
Verified: transferSpec
transferSpec: Properties successfully verified on all inputs
Artifact FinalResults.html already registered in REPORTS
Diversification did not produce statistics.
Total time for contract: 3 seconds ; Split time: 0 seconds ; Number of problems: 1 ; Solver time : 3 seconds
Verified: balancesBoundedByTotalSupply_preserve_explicit_transfer(address,uint256)
balancesBoundedByTotalSupply_preserve_explicit_transfer(address,uint256): Properties successfully verified on all inputs
Proved that add can't overflow for bound 115792089237316195423570985008687907853269984665640564039457584007913129639935, removing 1 check
marking potential over-/underflowing expression class vc.data.TACExpr$Vec$Add$Binary with 'will not wrap' annotation
there already is a replacement registered in this PatchingProgram for pointer "CmdPointer(block=0_0_0_8_0_0, pos=41)", only one replacement is allowed per pointer
Diversification did not produce statistics.
Total time for contract: 3 seconds ; Split time: 0 seconds ; Number of problems: 1 ; Solver time : 3 seconds
Verified: transferReverts
transferReverts: Properties successfully verified on all inputs
Artifact FinalResults.html already registered in REPORTS
Diversification did not produce statistics.
Total time for contract: 3 seconds ; Split time: 0 seconds ; Number of problems: 1 ; Solver time : 2 seconds
Verified: onlyHolderCanChangeAllowance-balanceOf(address)
onlyHolderCanChangeAllowance-balanceOf(address): Properties successfully verified on all inputs
Artifact output.json already registered in REPORTS
Found variables used before being initialized in totalSupplyIsSumOfBalances_preserve-deposit(). Enable info logs for DSA
dumping codeMap "PresolverRule-totalSupplyIsSumOfBalances_preserve-deposit()" in html format, but the file name "PresolverRule-totalSupplyIsSumOfBalances_preserve-deposit()" is lacking the `.html` suffix. Appending it and dumping that file.
Diversification did not produce statistics.
Total time for contract: 2 seconds ; Split time: 0 seconds ; Number of problems: 1 ; Solver time : 2 seconds
Verified: onlyHolderCanChangeAllowance-increaseAllowance(address,uint256)
onlyHolderCanChangeAllowance-increaseAllowance(address,uint256): Properties successfully verified on all inputs
Artifact output.json already registered in REPORTS
Found variables used before being initialized in totalSupplyIsSumOfBalances_instate. Enable info logs for DSA
marking potential over-/underflowing expression class vc.data.TACExpr$BinOp$Sub with 'will not wrap' annotation
Proved that add can't overflow for bound 115792089237316195423570985008687907853269984665640564039457584007913129639935, removing 1 check
marking potential over-/underflowing expression class vc.data.TACExpr$Vec$Add$Binary with 'will not wrap' annotation
there already is a replacement registered in this PatchingProgram for pointer "CmdPointer(block=0_0_0_8_0_0, pos=85)", only one replacement is allowed per pointer
marking potential over-/underflowing expression class vc.data.TACExpr$BinOp$Sub with 'will not wrap' annotation
marking potential over-/underflowing expression class vc.data.TACExpr$BinOp$Sub with 'will not wrap' annotation
marking potential over-/underflowing expression class vc.data.TACExpr$BinOp$Sub with 'will not wrap' annotation
Artifact output.json already registered in REPORTS
Found variables used before being initialized in totalSupplyIsSumOfBalances_preserve-increaseAllowance(address,uint256). Enable info logs for DSA
dumping codeMap "PresolverRule-totalSupplyIsSumOfBalances_instate" in html format, but the file name "PresolverRule-totalSupplyIsSumOfBalances_instate" is lacking the `.html` suffix. Appending it and dumping that file.
Artifact output.json already registered in REPORTS
Found variables used before being initialized in onlyHolderCanChangeAllowance-allowance(address,address). Enable info logs for DSA
dumping codeMap "PresolverRule-totalSupplyIsSumOfBalances_preserve-increaseAllowance(address,uint256)" in html format, but the file name "PresolverRule-totalSupplyIsSumOfBalances_preserve-increaseAllowance(address,uint256)" is lacking the `.html` suffix. Appending it and dumping that file.
Diversification did not produce statistics.
Total time for contract: 0 seconds ; Split time: 0 seconds ; Number of problems: 1 ; Solver time : 0 seconds
Verified: totalSupplyIsSumOfBalances_instate
totalSupplyIsSumOfBalances_instate: Properties successfully verified on all inputs
Diversification did not produce statistics.
Total time for contract: 6 seconds ; Split time: 0 seconds ; Number of problems: 1 ; Solver time : 6 seconds
Verified: transferDoesntRevert
transferDoesntRevert: Properties successfully verified on all inputs
Artifact FinalResults.html already registered in REPORTS
marking potential over-/underflowing expression class vc.data.TACExpr$BinOp$Sub with 'will not wrap' annotation
Proved that add can't overflow for bound 115792089237316195423570985008687907853269984665640564039457584007913129639935, removing 1 check
marking potential over-/underflowing expression class vc.data.TACExpr$Vec$Add$Binary with 'will not wrap' annotation
there already is a replacement registered in this PatchingProgram for pointer "CmdPointer(block=0_0_0_8_0_0, pos=98)", only one replacement is allowed per pointer
Proved that add can't overflow for bound 115792089237316195423570985008687907853269984665640564039457584007913129639935, removing 1 check
marking potential over-/underflowing expression class vc.data.TACExpr$Vec$Add$Binary with 'will not wrap' annotation
there already is a replacement registered in this PatchingProgram for pointer "CmdPointer(block=0_0_0_8_0_0, pos=116)", only one replacement is allowed per pointer
marking potential over-/underflowing expression class vc.data.TACExpr$BinOp$Sub with 'will not wrap' annotation
marking potential over-/underflowing expression class vc.data.TACExpr$BinOp$Sub with 'will not wrap' annotation
marking potential over-/underflowing expression class vc.data.TACExpr$BinOp$Sub with 'will not wrap' annotation
marking potential over-/underflowing expression class vc.data.TACExpr$BinOp$Sub with 'will not wrap' annotation
Proved that add can't overflow for bound 115792089237316195423570985008687907853269984665640564039457584007913129639935, removing 1 check
marking potential over-/underflowing expression class vc.data.TACExpr$Vec$Add$Binary with 'will not wrap' annotation
there already is a replacement registered in this PatchingProgram for pointer "CmdPointer(block=0_0_0_36_0_0, pos=224)", only one replacement is allowed per pointer
marking potential over-/underflowing expression class vc.data.TACExpr$BinOp$Sub with 'will not wrap' annotation
marking potential over-/underflowing expression class vc.data.TACExpr$BinOp$Sub with 'will not wrap' annotation
marking potential over-/underflowing expression class vc.data.TACExpr$BinOp$Sub with 'will not wrap' annotation
dumping codeMap "PresolverRule-onlyHolderCanChangeAllowance-allowance(address,address)" in html format, but the file name "PresolverRule-onlyHolderCanChangeAllowance-allowance(address,address)" is lacking the `.html` suffix. Appending it and dumping that file.
marking potential over-/underflowing expression class vc.data.TACExpr$BinOp$Sub with 'will not wrap' annotation
marking potential over-/underflowing expression class vc.data.TACExpr$BinOp$Sub with 'will not wrap' annotation
Proved that add can't overflow for bound 115792089237316195423570985008687907853269984665640564039457584007913129639935, removing 1 check
marking potential over-/underflowing expression class vc.data.TACExpr$Vec$Add$Binary with 'will not wrap' annotation
there already is a replacement registered in this PatchingProgram for pointer "CmdPointer(block=0_0_0_6_0_0, pos=98)", only one replacement is allowed per pointer
Proved that add can't overflow for bound 115792089237316195423570985008687907853269984665640564039457584007913129639935, removing 1 check
marking potential over-/underflowing expression class vc.data.TACExpr$Vec$Add$Binary with 'will not wrap' annotation
there already is a replacement registered in this PatchingProgram for pointer "CmdPointer(block=0_0_0_6_0_0, pos=116)", only one replacement is allowed per pointer
marking potential over-/underflowing expression class vc.data.TACExpr$BinOp$Sub with 'will not wrap' annotation
marking potential over-/underflowing expression class vc.data.TACExpr$BinOp$Sub with 'will not wrap' annotation
marking potential over-/underflowing expression class vc.data.TACExpr$BinOp$Sub with 'will not wrap' annotation
marking potential over-/underflowing expression class vc.data.TACExpr$BinOp$Sub with 'will not wrap' annotation
marking potential over-/underflowing expression class vc.data.TACExpr$BinOp$Sub with 'will not wrap' annotation
Proved that add can't overflow for bound 115792089237316195423570985008687907853269984665640564039457584007913129639935, removing 1 check
marking potential over-/underflowing expression class vc.data.TACExpr$Vec$Add$Binary with 'will not wrap' annotation
there already is a replacement registered in this PatchingProgram for pointer "CmdPointer(block=0_0_0_31_0_0, pos=41)", only one replacement is allowed per pointer
Artifact output.json already registered in REPORTS
Artifact output.json already registered in REPORTS
Found variables used before being initialized in totalSupplyIsSumOfBalances_preserve-mint(address,uint256). Enable info logs for DSA
Artifact output.json already registered in REPORTS
Found variables used before being initialized in balancesBoundedByTotalSupply_preserve_explicit_transferFrom(address,address,uint256). Enable info logs for DSA
Found variables used before being initialized in onlyHolderCanChangeAllowance-mint(address,uint256). Enable info logs for DSA
Artifact output.json already registered in REPORTS
Found variables used before being initialized in balancesBoundedByTotalSupply_preserve-deposit(). Enable info logs for DSA
dumping codeMap "PresolverRule-totalSupplyIsSumOfBalances_preserve-mint(address,uint256)" in html format, but the file name "PresolverRule-totalSupplyIsSumOfBalances_preserve-mint(address,uint256)" is lacking the `.html` suffix. Appending it and dumping that file.
dumping codeMap "PresolverRule-onlyHolderCanChangeAllowance-mint(address,uint256)" in html format, but the file name "PresolverRule-onlyHolderCanChangeAllowance-mint(address,uint256)" is lacking the `.html` suffix. Appending it and dumping that file.
prettifyModel finished.
Diversification did not produce statistics.
Total time for contract: 3 seconds ; Split time: 0 seconds ; Number of problems: 1 ; Solver time : 2 seconds
Violated: totalSupplyIsSumOfBalances_preserve-deposit()
totalSupplyIsSumOfBalances_preserve-deposit(): A property is violated
The names of the local variables are [certoraInvF.isFallback, certoraInvF.isPayable, certoraInvF.isPure, certoraInvF.isView, certoraInvF.numberOfArguments, certoraInvF.selector, invariantEnv.block.coinbase, invariantEnv.block.difficulty, invariantEnv.block.gaslimit, invariantEnv.block.number, invariantEnv.block.timestamp, invariantEnv.msg.sender, invariantEnv.msg.value, invariantEnv.tx.origin, lastHasThrown, lastReverted]
StorageState: ERC20._balances[0x2711]: 0 - STORAGE_HAVOC
StorageState: ERC20._totalSupply: 3 - STORAGE_HAVOC
CallTrace: caller: assume invariant in pre-state callee: ERC20.totalSupply()
CallTrace: internal call: (internal) totalSupply()
Load from: _totalSupply
dumping codeMap "PresolverRule-balancesBoundedByTotalSupply_preserve-deposit()" in html format, but the file name "PresolverRule-balancesBoundedByTotalSupply_preserve-deposit()" is lacking the `.html` suffix. Appending it and dumping that file.
StorageState: ERC20._balances[0x2711]: 0 - STORAGE_HAVOC
StorageState: ERC20._totalSupply: 3 - STORAGE_HAVOC
(internal) ERC20.totalSupply() / 3
EXTERNAL CALL ERC20.totalSupply(): all expected parameters found in value map
EXTERNAL CALL ERC20.totalSupply(): all expected return values found in value map
ERC20.totalSupply() / 3
Got a non-constant, non-variable operand (Operand(out=CANON29:int, exp=to_mathint(ERC20.totalSupply() returns (uint256)()))) that is not in the builderState. Failed to construct its complete syntax-tree
Exp to_mathint(ERC20.totalSupply()) == sum_of_balances has the sub expressions: [to_mathint(ERC20.totalSupply()), sum_of_balances]
CallTrace: caller: check effects of step taken by one of the functions callee: ERC20.deposit()
Load from: sender.balance
Store at: sender.balance
Load from: receiver.balance
Store at: receiver.balance
Load from: _balances[*]
Store at: _balances[*]
EXTERNAL CALL ERC20.deposit(): all expected parameters found in value map
EXTERNAL CALL ERC20.deposit(): all expected return values found in value map
ERC20.deposit() / 
CallTrace: caller: assert invariant in post-state callee: ERC20.totalSupply()
CallTrace: internal call: (internal) totalSupply()
Load from: _totalSupply
StorageState: ERC20._balances[0x2711]: 2 (changed) - STORAGE_HAVOC_DEPENDENT
StorageState: ERC20._totalSupply: 3 - STORAGE_HAVOC
(internal) ERC20.totalSupply() / 3
EXTERNAL CALL ERC20.totalSupply(): all expected parameters found in value map
EXTERNAL CALL ERC20.totalSupply(): all expected return values found in value map
ERC20.totalSupply() / 3
Got a non-constant, non-variable operand (Operand(out=CANON94:int, exp=to_mathint(ERC20.totalSupply() returns (uint256)()))) that is not in the builderState. Failed to construct its complete syntax-tree
Exp to_mathint(ERC20.totalSupply()) == sum_of_balances has the sub expressions: [to_mathint(ERC20.totalSupply()), sum_of_balances]
StorageState: ERC20._balances[0x2711]: 2 - STORAGE_HAVOC_DEPENDENT
StorageState: ERC20._totalSupply: 3 - STORAGE_HAVOC
marking potential over-/underflowing expression class vc.data.TACExpr$BinOp$Sub with 'will not wrap' annotation
marking potential over-/underflowing expression class vc.data.TACExpr$BinOp$Sub with 'will not wrap' annotation
dumping codeMap "PresolverRule-balancesBoundedByTotalSupply_preserve_explicit_transferFrom(address,address,uint256)" in html format, but the file name "PresolverRule-balancesBoundedByTotalSupply_preserve_explicit_transferFrom(address,address,uint256)" is lacking the `.html` suffix. Appending it and dumping that file.
Artifact output.json already registered in REPORTS
Found variables used before being initialized in totalSupplyIsSumOfBalances_preserve-burn(address,uint256). Enable info logs for DSA
Diversification did not produce statistics.
Total time for contract: 1 seconds ; Split time: 0 seconds ; Number of problems: 1 ; Solver time : 1 seconds
Verified: onlyHolderCanChangeAllowance-allowance(address,address)
onlyHolderCanChangeAllowance-allowance(address,address): Properties successfully verified on all inputs
Diversification did not produce statistics.
Total time for contract: 0 seconds ; Split time: 0 seconds ; Number of problems: 1 ; Solver time : 0 seconds
Verified: totalSupplyIsSumOfBalances_preserve-mint(address,uint256)
totalSupplyIsSumOfBalances_preserve-mint(address,uint256): Properties successfully verified on all inputs
dumping codeMap "PresolverRule-totalSupplyIsSumOfBalances_preserve-burn(address,uint256)" in html format, but the file name "PresolverRule-totalSupplyIsSumOfBalances_preserve-burn(address,uint256)" is lacking the `.html` suffix. Appending it and dumping that file.
Diversification did not produce statistics.
Total time for contract: 0 seconds ; Split time: 0 seconds ; Number of problems: 1 ; Solver time : 0 seconds
Verified: balancesBoundedByTotalSupply_preserve_explicit_transferFrom(address,address,uint256)
balancesBoundedByTotalSupply_preserve_explicit_transferFrom(address,address,uint256): Properties successfully verified on all inputs
marking potential over-/underflowing expression class vc.data.TACExpr$BinOp$Sub with 'will not wrap' annotation
marking potential over-/underflowing expression class vc.data.TACExpr$BinOp$Sub with 'will not wrap' annotation
marking potential over-/underflowing expression class vc.data.TACExpr$BinOp$Sub with 'will not wrap' annotation
marking potential over-/underflowing expression class vc.data.TACExpr$BinOp$Sub with 'will not wrap' annotation
marking potential over-/underflowing expression class vc.data.TACExpr$BinOp$Sub with 'will not wrap' annotation
Proved that add can't overflow for bound 115792089237316195423570985008687907853269984665640564039457584007913129639935, removing 1 check
marking potential over-/underflowing expression class vc.data.TACExpr$Vec$Add$Binary with 'will not wrap' annotation
there already is a replacement registered in this PatchingProgram for pointer "CmdPointer(block=0_0_0_31_0_0, pos=85)", only one replacement is allowed per pointer
Diversification did not produce statistics.
Total time for contract: 0 seconds ; Split time: 0 seconds ; Number of problems: 1 ; Solver time : 0 seconds
Verified: onlyHolderCanChangeAllowance-mint(address,uint256)
onlyHolderCanChangeAllowance-mint(address,uint256): Properties successfully verified on all inputs
Artifact output.json already registered in REPORTS
Found variables used before being initialized in balancesBoundedByTotalSupply_preserve-increaseAllowance(address,uint256). Enable info logs for DSA
prettifyModel finished.
Diversification did not produce statistics.
Total time for contract: 0 seconds ; Split time: 0 seconds ; Number of problems: 1 ; Solver time : 0 seconds
Violated: balancesBoundedByTotalSupply_preserve-deposit()
balancesBoundedByTotalSupply_preserve-deposit(): A property is violated
The names of the local variables are [alice, bob, certoraInvF.isFallback, certoraInvF.isPayable, certoraInvF.isPure, certoraInvF.isView, certoraInvF.numberOfArguments, certoraInvF.selector, invariantEnv.block.coinbase, invariantEnv.block.difficulty, invariantEnv.block.gaslimit, invariantEnv.block.number, invariantEnv.block.timestamp, invariantEnv.msg.sender, invariantEnv.msg.value, invariantEnv.tx.origin, lastHasThrown, lastReverted]
StorageState: ERC20._balances[0x401]: 0 - STORAGE_HAVOC
StorageState: ERC20._balances[0x402]: 1 - STORAGE_HAVOC
StorageState: ERC20._totalSupply: 2 - STORAGE_HAVOC
CallTrace: caller: assume invariant in pre-state callee: ERC20.balanceOf(address)
CallTrace: internal call: (internal) balanceOf(address)
Load from: _balances[*]
StorageState: ERC20._balances[0x401]: 0 - STORAGE_HAVOC
StorageState: ERC20._balances[0x402]: 1 - STORAGE_HAVOC
StorageState: ERC20._totalSupply: 2 - STORAGE_HAVOC
(internal) ERC20.balanceOf(account=0x402) / 1
EXTERNAL CALL ERC20.balanceOf(address): all expected parameters found in value map
EXTERNAL CALL ERC20.balanceOf(address): all expected return values found in value map
ERC20.balanceOf(account=X) / 1
CallTrace: caller: assume invariant in pre-state callee: ERC20.balanceOf(address)
CallTrace: internal call: (internal) balanceOf(address)
Load from: _balances[*]
StorageState: ERC20._balances[0x401]: 0 - STORAGE_HAVOC
StorageState: ERC20._balances[0x402]: 1 - STORAGE_HAVOC
StorageState: ERC20._totalSupply: 2 - STORAGE_HAVOC
(internal) ERC20.balanceOf(account=0x401) / 0
EXTERNAL CALL ERC20.balanceOf(address): all expected parameters found in value map
EXTERNAL CALL ERC20.balanceOf(address): all expected return values found in value map
ERC20.balanceOf(account=X) / 0
Got a non-constant, non-variable operand (Operand(out=I51:int, exp=ERC20.balanceOf(address account) returns (uint256)(alice))) that is not in the builderState. Failed to construct its complete syntax-tree
Got a non-constant, non-variable operand (Operand(out=I74:int, exp=ERC20.balanceOf(address account) returns (uint256)(bob))) that is not in the builderState. Failed to construct its complete syntax-tree
CallTrace: caller: assume invariant in pre-state callee: ERC20.totalSupply()
CallTrace: internal call: (internal) totalSupply()
Load from: _totalSupply
StorageState: ERC20._balances[0x401]: 0 - STORAGE_HAVOC
StorageState: ERC20._balances[0x402]: 1 - STORAGE_HAVOC
StorageState: ERC20._totalSupply: 2 - STORAGE_HAVOC
(internal) ERC20.totalSupply() / 2
EXTERNAL CALL ERC20.totalSupply(): all expected parameters found in value map
EXTERNAL CALL ERC20.totalSupply(): all expected return values found in value map
ERC20.totalSupply() / 2
Got a non-constant, non-variable operand (Operand(out=I89:int, exp=to_mathint(ERC20.totalSupply() returns (uint256)()))) that is not in the builderState. Failed to construct its complete syntax-tree
Exp ERC20.balanceOf(account=alice) + ERC20.balanceOf(account=bob) <= to_mathint(ERC20.totalSupply()) has the sub expressions: [ERC20.balanceOf(account=alice) + ERC20.balanceOf(account=bob), to_mathint(ERC20.totalSupply())]
CallTrace: caller: check effects of step taken by one of the functions callee: ERC20.deposit()
Load from: sender.balance
Store at: sender.balance
Load from: receiver.balance
Store at: receiver.balance
Load from: _balances[*]
Store at: _balances[*]
EXTERNAL CALL ERC20.deposit(): all expected parameters found in value map
EXTERNAL CALL ERC20.deposit(): all expected return values found in value map
ERC20.deposit() / 
CallTrace: caller: assert invariant in post-state callee: ERC20.balanceOf(address)
CallTrace: internal call: (internal) balanceOf(address)
Load from: _balances[*]
StorageState: ERC20._balances[0x401]: 5 (changed) - STORAGE_HAVOC_DEPENDENT
StorageState: ERC20._balances[0x402]: 1 - STORAGE_HAVOC
StorageState: ERC20._totalSupply: 2 - STORAGE_HAVOC
(internal) ERC20.balanceOf(account=0x402) / 1
EXTERNAL CALL ERC20.balanceOf(address): all expected parameters found in value map
EXTERNAL CALL ERC20.balanceOf(address): all expected return values found in value map
ERC20.balanceOf(account=X) / 1
CallTrace: caller: assert invariant in post-state callee: ERC20.balanceOf(address)
CallTrace: internal call: (internal) balanceOf(address)
Load from: _balances[*]
StorageState: ERC20._balances[0x401]: 5 - STORAGE_HAVOC_DEPENDENT
StorageState: ERC20._balances[0x402]: 1 - STORAGE_HAVOC
StorageState: ERC20._totalSupply: 2 - STORAGE_HAVOC
(internal) ERC20.balanceOf(account=0x401) / 5
EXTERNAL CALL ERC20.balanceOf(address): all expected parameters found in value map
EXTERNAL CALL ERC20.balanceOf(address): all expected return values found in value map
ERC20.balanceOf(account=X) / 5
Got a non-constant, non-variable operand (Operand(out=I112:int, exp=ERC20.balanceOf(address account) returns (uint256)(alice))) that is not in the builderState. Failed to construct its complete syntax-tree
Got a non-constant, non-variable operand (Operand(out=I135:int, exp=ERC20.balanceOf(address account) returns (uint256)(bob))) that is not in the builderState. Failed to construct its complete syntax-tree
CallTrace: caller: assert invariant in post-state callee: ERC20.totalSupply()
CallTrace: internal call: (internal) totalSupply()
Load from: _totalSupply
StorageState: ERC20._balances[0x401]: 5 - STORAGE_HAVOC_DEPENDENT
StorageState: ERC20._balances[0x402]: 1 - STORAGE_HAVOC
StorageState: ERC20._totalSupply: 2 - STORAGE_HAVOC
(internal) ERC20.totalSupply() / 2
EXTERNAL CALL ERC20.totalSupply(): all expected parameters found in value map
EXTERNAL CALL ERC20.totalSupply(): all expected return values found in value map
ERC20.totalSupply() / 2
Got a non-constant, non-variable operand (Operand(out=I150:int, exp=to_mathint(ERC20.totalSupply() returns (uint256)()))) that is not in the builderState. Failed to construct its complete syntax-tree
Exp ERC20.balanceOf(account=alice) + ERC20.balanceOf(account=bob) <= to_mathint(ERC20.totalSupply()) has the sub expressions: [ERC20.balanceOf(account=alice) + ERC20.balanceOf(account=bob), to_mathint(ERC20.totalSupply())]
StorageState: ERC20._balances[0x401]: 5 - STORAGE_HAVOC_DEPENDENT
StorageState: ERC20._balances[0x402]: 1 - STORAGE_HAVOC
StorageState: ERC20._totalSupply: 2 - STORAGE_HAVOC
marking potential over-/underflowing expression class vc.data.TACExpr$BinOp$Sub with 'will not wrap' annotation
marking potential over-/underflowing expression class vc.data.TACExpr$BinOp$Sub with 'will not wrap' annotation
Artifact output.json already registered in REPORTS
Found variables used before being initialized in totalSupplyIsSumOfBalances_preserve-decreaseAllowance(address,uint256). Enable info logs for DSA
Diversification did not produce statistics.
Total time for contract: 0 seconds ; Split time: 0 seconds ; Number of problems: 1 ; Solver time : 0 seconds
Verified: totalSupplyIsSumOfBalances_preserve-burn(address,uint256)
totalSupplyIsSumOfBalances_preserve-burn(address,uint256): Properties successfully verified on all inputs
Diversification did not produce statistics.
Total time for contract: 2 seconds ; Split time: 0 seconds ; Number of problems: 1 ; Solver time : 2 seconds
Verified: totalSupplyIsSumOfBalances_preserve-increaseAllowance(address,uint256)
totalSupplyIsSumOfBalances_preserve-increaseAllowance(address,uint256): Properties successfully verified on all inputs
marking potential over-/underflowing expression class vc.data.TACExpr$BinOp$Sub with 'will not wrap' annotation
marking potential over-/underflowing expression class vc.data.TACExpr$BinOp$Sub with 'will not wrap' annotation
dumping codeMap "PresolverRule-totalSupplyIsSumOfBalances_preserve-decreaseAllowance(address,uint256)" in html format, but the file name "PresolverRule-totalSupplyIsSumOfBalances_preserve-decreaseAllowance(address,uint256)" is lacking the `.html` suffix. Appending it and dumping that file.
dumping codeMap "PresolverRule-balancesBoundedByTotalSupply_preserve-increaseAllowance(address,uint256)" in html format, but the file name "PresolverRule-balancesBoundedByTotalSupply_preserve-increaseAllowance(address,uint256)" is lacking the `.html` suffix. Appending it and dumping that file.
Artifact output.json already registered in REPORTS
Found variables used before being initialized in totalSupplyIsSumOfBalances_preserve-withdraw(uint256). Enable info logs for DSA
Diversification did not produce statistics.
Total time for contract: 0 seconds ; Split time: 0 seconds ; Number of problems: 1 ; Solver time : 0 seconds
Verified: totalSupplyIsSumOfBalances_preserve-decreaseAllowance(address,uint256)
totalSupplyIsSumOfBalances_preserve-decreaseAllowance(address,uint256): Properties successfully verified on all inputs
marking potential over-/underflowing expression class vc.data.TACExpr$BinOp$Sub with 'will not wrap' annotation
marking potential over-/underflowing expression class vc.data.TACExpr$BinOp$Sub with 'will not wrap' annotation
marking potential over-/underflowing expression class vc.data.TACExpr$BinOp$Sub with 'will not wrap' annotation
marking potential over-/underflowing expression class vc.data.TACExpr$BinOp$Sub with 'will not wrap' annotation
marking potential over-/underflowing expression class vc.data.TACExpr$BinOp$Sub with 'will not wrap' annotation
Proved that add can't overflow for bound 115792089237316195423570985008687907853269984665640564039457584007913129639935, removing 1 check
marking potential over-/underflowing expression class vc.data.TACExpr$Vec$Add$Binary with 'will not wrap' annotation
there already is a replacement registered in this PatchingProgram for pointer "CmdPointer(block=0_0_0_31_0_0, pos=98)", only one replacement is allowed per pointer
Proved that add can't overflow for bound 115792089237316195423570985008687907853269984665640564039457584007913129639935, removing 1 check
marking potential over-/underflowing expression class vc.data.TACExpr$Vec$Add$Binary with 'will not wrap' annotation
there already is a replacement registered in this PatchingProgram for pointer "CmdPointer(block=0_0_0_31_0_0, pos=116)", only one replacement is allowed per pointer
marking potential over-/underflowing expression class vc.data.TACExpr$BinOp$Sub with 'will not wrap' annotation
marking potential over-/underflowing expression class vc.data.TACExpr$BinOp$Sub with 'will not wrap' annotation
Artifact output.json already registered in REPORTS
Found variables used before being initialized in balancesBoundedByTotalSupply_preserve-mint(address,uint256). Enable info logs for DSA
marking potential over-/underflowing expression class vc.data.TACExpr$BinOp$Sub with 'will not wrap' annotation
marking potential over-/underflowing expression class vc.data.TACExpr$BinOp$Sub with 'will not wrap' annotation
Proved that add can't overflow for bound 115792089237316195423570985008687907853269984665640564039457584007913129639935, removing 1 check
marking potential over-/underflowing expression class vc.data.TACExpr$Vec$Add$Binary with 'will not wrap' annotation
there already is a replacement registered in this PatchingProgram for pointer "CmdPointer(block=0_0_0_6_0_0, pos=201)", only one replacement is allowed per pointer
marking potential over-/underflowing expression class vc.data.TACExpr$BinOp$Sub with 'will not wrap' annotation
marking potential over-/underflowing expression class vc.data.TACExpr$BinOp$Sub with 'will not wrap' annotation
marking potential over-/underflowing expression class vc.data.TACExpr$BinOp$Sub with 'will not wrap' annotation
marking potential over-/underflowing expression class vc.data.TACExpr$BinOp$Sub with 'will not wrap' annotation
marking potential over-/underflowing expression class vc.data.TACExpr$BinOp$Sub with 'will not wrap' annotation
dumping codeMap "PresolverRule-totalSupplyIsSumOfBalances_preserve-withdraw(uint256)" in html format, but the file name "PresolverRule-totalSupplyIsSumOfBalances_preserve-withdraw(uint256)" is lacking the `.html` suffix. Appending it and dumping that file.
Artifact output.json already registered in REPORTS
Artifact output.json already registered in REPORTS
Found variables used before being initialized in onlyHolderCanChangeAllowance-burn(address,uint256). Enable info logs for DSA
Found variables used before being initialized in onlyHolderCanChangeAllowance-transferFrom(address,address,uint256). Enable info logs for DSA
marking potential over-/underflowing expression class vc.data.TACExpr$BinOp$Sub with 'will not wrap' annotation
marking potential over-/underflowing expression class vc.data.TACExpr$BinOp$Sub with 'will not wrap' annotation
Proved that add can't overflow for bound 115792089237316195423570985008687907853269984665640564039457584007913129639935, removing 1 check
marking potential over-/underflowing expression class vc.data.TACExpr$Vec$Add$Binary with 'will not wrap' annotation
there already is a replacement registered in this PatchingProgram for pointer "CmdPointer(block=0_0_0_8_0_0, pos=117)", only one replacement is allowed per pointer
dumping codeMap "PresolverRule-balancesBoundedByTotalSupply_preserve-mint(address,uint256)" in html format, but the file name "PresolverRule-balancesBoundedByTotalSupply_preserve-mint(address,uint256)" is lacking the `.html` suffix. Appending it and dumping that file.
Artifact output.json already registered in REPORTS
Found variables used before being initialized in totalSupplyIsSumOfBalances_preserve-transfer(address,uint256). Enable info logs for DSA
Diversification did not produce statistics.
Total time for contract: 0 seconds ; Split time: 0 seconds ; Number of problems: 1 ; Solver time : 0 seconds
Verified: balancesBoundedByTotalSupply_preserve-increaseAllowance(address,uint256)
balancesBoundedByTotalSupply_preserve-increaseAllowance(address,uint256): Properties successfully verified on all inputs
marking potential over-/underflowing expression class vc.data.TACExpr$BinOp$Sub with 'will not wrap' annotation
Artifact output.json already registered in REPORTS
Found variables used before being initialized in totalSupplyIsSumOfBalances_preserve-approve(address,uint256). Enable info logs for DSA
dumping codeMap "PresolverRule-onlyHolderCanChangeAllowance-burn(address,uint256)" in html format, but the file name "PresolverRule-onlyHolderCanChangeAllowance-burn(address,uint256)" is lacking the `.html` suffix. Appending it and dumping that file.
dumping codeMap "PresolverRule-totalSupplyIsSumOfBalances_preserve-approve(address,uint256)" in html format, but the file name "PresolverRule-totalSupplyIsSumOfBalances_preserve-approve(address,uint256)" is lacking the `.html` suffix. Appending it and dumping that file.
dumping codeMap "PresolverRule-onlyHolderCanChangeAllowance-transferFrom(address,address,uint256)" in html format, but the file name "PresolverRule-onlyHolderCanChangeAllowance-transferFrom(address,address,uint256)" is lacking the `.html` suffix. Appending it and dumping that file.
marking potential over-/underflowing expression class vc.data.TACExpr$BinOp$Sub with 'will not wrap' annotation
marking potential over-/underflowing expression class vc.data.TACExpr$BinOp$Sub with 'will not wrap' annotation
marking potential over-/underflowing expression class vc.data.TACExpr$BinOp$Sub with 'will not wrap' annotation
marking potential over-/underflowing expression class vc.data.TACExpr$BinOp$Sub with 'will not wrap' annotation
marking potential over-/underflowing expression class vc.data.TACExpr$BinOp$Sub with 'will not wrap' annotation
marking potential over-/underflowing expression class vc.data.TACExpr$BinOp$Sub with 'will not wrap' annotation
dumping codeMap "PresolverRule-totalSupplyIsSumOfBalances_preserve-transfer(address,uint256)" in html format, but the file name "PresolverRule-totalSupplyIsSumOfBalances_preserve-transfer(address,uint256)" is lacking the `.html` suffix. Appending it and dumping that file.
Artifact output.json already registered in REPORTS
Found variables used before being initialized in balancesBoundedByTotalSupply_preserve-withdraw(uint256). Enable info logs for DSA
Diversification did not produce statistics.
Total time for contract: 0 seconds ; Split time: 0 seconds ; Number of problems: 1 ; Solver time : 0 seconds
Verified: totalSupplyIsSumOfBalances_preserve-approve(address,uint256)
totalSupplyIsSumOfBalances_preserve-approve(address,uint256): Properties successfully verified on all inputs
Diversification did not produce statistics.
Total time for contract: 0 seconds ; Split time: 0 seconds ; Number of problems: 1 ; Solver time : 0 seconds
Verified: totalSupplyIsSumOfBalances_preserve-transfer(address,uint256)
totalSupplyIsSumOfBalances_preserve-transfer(address,uint256): Properties successfully verified on all inputs
prettifyModel finished.
Diversification did not produce statistics.
Total time for contract: 0 seconds ; Split time: 0 seconds ; Number of problems: 1 ; Solver time : 0 seconds
Violated: balancesBoundedByTotalSupply_preserve-mint(address,uint256)
balancesBoundedByTotalSupply_preserve-mint(address,uint256): A property is violated
The names of the local variables are [alice, bob, certoraInvF.isFallback, certoraInvF.isPayable, certoraInvF.isPure, certoraInvF.isView, certoraInvF.numberOfArguments, certoraInvF.selector, invariantCalldata, invariantEnv.block.coinbase, invariantEnv.block.difficulty, invariantEnv.block.gaslimit, invariantEnv.block.number, invariantEnv.block.timestamp, invariantEnv.msg.sender, invariantEnv.msg.value, invariantEnv.tx.origin, lastHasThrown, lastReverted]
StorageState: ERC20._balances[0x2712]: 0 - STORAGE_HAVOC
StorageState: ERC20._owner: ERC20 (0x16dc) - STORAGE_HAVOC
StorageState: ERC20._totalSupply: 1 - STORAGE_HAVOC
CallTrace: caller: assume invariant in pre-state callee: ERC20.balanceOf(address)
CallTrace: internal call: (internal) balanceOf(address)
Load from: _balances[*]
StorageState: ERC20._balances[0x2712]: 0 - STORAGE_HAVOC
StorageState: ERC20._owner: ERC20 (0x16dc) - STORAGE_HAVOC
StorageState: ERC20._totalSupply: 1 - STORAGE_HAVOC
(internal) ERC20.balanceOf(account=0x2712) / 0
EXTERNAL CALL ERC20.balanceOf(address): all expected parameters found in value map
EXTERNAL CALL ERC20.balanceOf(address): all expected return values found in value map
ERC20.balanceOf(account=X) / 0
CallTrace: caller: assume invariant in pre-state callee: ERC20.balanceOf(address)
CallTrace: internal call: (internal) balanceOf(address)
Load from: _balances[*]
StorageState: ERC20._balances[0x2712]: 0 - STORAGE_HAVOC
StorageState: ERC20._owner: ERC20 (0x16dc) - STORAGE_HAVOC
StorageState: ERC20._totalSupply: 1 - STORAGE_HAVOC
(internal) ERC20.balanceOf(account=0x2712) / 0
EXTERNAL CALL ERC20.balanceOf(address): all expected parameters found in value map
EXTERNAL CALL ERC20.balanceOf(address): all expected return values found in value map
ERC20.balanceOf(account=X) / 0
Got a non-constant, non-variable operand (Operand(out=I52:int, exp=ERC20.balanceOf(address account) returns (uint256)(alice))) that is not in the builderState. Failed to construct its complete syntax-tree
Got a non-constant, non-variable operand (Operand(out=I75:int, exp=ERC20.balanceOf(address account) returns (uint256)(bob))) that is not in the builderState. Failed to construct its complete syntax-tree
CallTrace: caller: assume invariant in pre-state callee: ERC20.totalSupply()
CallTrace: internal call: (internal) totalSupply()
Load from: _totalSupply
StorageState: ERC20._balances[0x2712]: 0 - STORAGE_HAVOC
StorageState: ERC20._owner: ERC20 (0x16dc) - STORAGE_HAVOC
StorageState: ERC20._totalSupply: 1 - STORAGE_HAVOC
(internal) ERC20.totalSupply() / 1
EXTERNAL CALL ERC20.totalSupply(): all expected parameters found in value map
EXTERNAL CALL ERC20.totalSupply(): all expected return values found in value map
ERC20.totalSupply() / 1
Got a non-constant, non-variable operand (Operand(out=I90:int, exp=to_mathint(ERC20.totalSupply() returns (uint256)()))) that is not in the builderState. Failed to construct its complete syntax-tree
Exp ERC20.balanceOf(account=alice) + ERC20.balanceOf(account=bob) <= to_mathint(ERC20.totalSupply()) has the sub expressions: [ERC20.balanceOf(account=alice) + ERC20.balanceOf(account=bob), to_mathint(ERC20.totalSupply())]
CallTrace: caller: check effects of step taken by one of the functions callee: ERC20.mint(address, uint256)
Load from: sender.balance
Store at: sender.balance
Load from: receiver.balance
Store at: receiver.balance
CallTrace: internal call: (internal) mint(address,uint256)
Load from: _owner
CallTrace: internal call: (internal) _beforeTokenTransfer(address,address,uint256)
StorageState: ERC20._balances[0x2712]: 0 - STORAGE_HAVOC
StorageState: ERC20._owner: ERC20 (0x16dc) - STORAGE_HAVOC
StorageState: ERC20._totalSupply: 1 - STORAGE_HAVOC
(internal) ERC20._beforeTokenTransfer(from=0, to=0x2712, amount=5) / 
Load from: _totalSupply
Store at: _totalSupply
Load from: _balances[*]
dumping codeMap "PresolverRule-balancesBoundedByTotalSupply_preserve-withdraw(uint256)" in html format, but the file name "PresolverRule-balancesBoundedByTotalSupply_preserve-withdraw(uint256)" is lacking the `.html` suffix. Appending it and dumping that file.
Store at: _balances[*]
CallTrace: internal call: (internal) _afterTokenTransfer(address,address,uint256)
StorageState: ERC20._balances[0x2712]: 5 (changed) - STORAGE_HAVOC_DEPENDENT
StorageState: ERC20._owner: ERC20 (0x16dc) - STORAGE_HAVOC
StorageState: ERC20._totalSupply: 6 (changed) - STORAGE_HAVOC_DEPENDENT
(internal) ERC20._afterTokenTransfer(from=0, to=0x2712, amount=5) / 
StorageState: ERC20._balances[0x2712]: 5 - STORAGE_HAVOC_DEPENDENT
StorageState: ERC20._owner: ERC20 (0x16dc) - STORAGE_HAVOC
StorageState: ERC20._totalSupply: 6 - STORAGE_HAVOC_DEPENDENT
(internal) ERC20.mint(account=0x2712, amount=5) / 
EXTERNAL CALL ERC20.mint(address, uint256): all expected parameters found in value map
EXTERNAL CALL ERC20.mint(address, uint256): all expected return values found in value map
ERC20.mint(account=0x2712, amount=5) / 
CallTrace: caller: assert invariant in post-state callee: ERC20.balanceOf(address)
CallTrace: internal call: (internal) balanceOf(address)
Load from: _balances[*]
StorageState: ERC20._balances[0x2712]: 5 - STORAGE_HAVOC_DEPENDENT
StorageState: ERC20._owner: ERC20 (0x16dc) - STORAGE_HAVOC
StorageState: ERC20._totalSupply: 6 - STORAGE_HAVOC_DEPENDENT
(internal) ERC20.balanceOf(account=0x2712) / 5
EXTERNAL CALL ERC20.balanceOf(address): all expected parameters found in value map
EXTERNAL CALL ERC20.balanceOf(address): all expected return values found in value map
ERC20.balanceOf(account=X) / 5
CallTrace: caller: assert invariant in post-state callee: ERC20.balanceOf(address)
CallTrace: internal call: (internal) balanceOf(address)
Load from: _balances[*]
StorageState: ERC20._balances[0x2712]: 5 - STORAGE_HAVOC_DEPENDENT
StorageState: ERC20._owner: ERC20 (0x16dc) - STORAGE_HAVOC
StorageState: ERC20._totalSupply: 6 - STORAGE_HAVOC_DEPENDENT
(internal) ERC20.balanceOf(account=0x2712) / 5
EXTERNAL CALL ERC20.balanceOf(address): all expected parameters found in value map
EXTERNAL CALL ERC20.balanceOf(address): all expected return values found in value map
ERC20.balanceOf(account=X) / 5
Got a non-constant, non-variable operand (Operand(out=I113:int, exp=ERC20.balanceOf(address account) returns (uint256)(alice))) that is not in the builderState. Failed to construct its complete syntax-tree
Got a non-constant, non-variable operand (Operand(out=I136:int, exp=ERC20.balanceOf(address account) returns (uint256)(bob))) that is not in the builderState. Failed to construct its complete syntax-tree
CallTrace: caller: assert invariant in post-state callee: ERC20.totalSupply()
CallTrace: internal call: (internal) totalSupply()
Load from: _totalSupply
StorageState: ERC20._balances[0x2712]: 5 - STORAGE_HAVOC_DEPENDENT
StorageState: ERC20._owner: ERC20 (0x16dc) - STORAGE_HAVOC
StorageState: ERC20._totalSupply: 6 - STORAGE_HAVOC_DEPENDENT
(internal) ERC20.totalSupply() / 6
EXTERNAL CALL ERC20.totalSupply(): all expected parameters found in value map
EXTERNAL CALL ERC20.totalSupply(): all expected return values found in value map
ERC20.totalSupply() / 6
Got a non-constant, non-variable operand (Operand(out=I151:int, exp=to_mathint(ERC20.totalSupply() returns (uint256)()))) that is not in the builderState. Failed to construct its complete syntax-tree
Exp ERC20.balanceOf(account=alice) + ERC20.balanceOf(account=bob) <= to_mathint(ERC20.totalSupply()) has the sub expressions: [ERC20.balanceOf(account=alice) + ERC20.balanceOf(account=bob), to_mathint(ERC20.totalSupply())]
StorageState: ERC20._balances[0x2712]: 5 - STORAGE_HAVOC_DEPENDENT
StorageState: ERC20._owner: ERC20 (0x16dc) - STORAGE_HAVOC
StorageState: ERC20._totalSupply: 6 - STORAGE_HAVOC_DEPENDENT
Diversification did not produce statistics.
Total time for contract: 0 seconds ; Split time: 0 seconds ; Number of problems: 1 ; Solver time : 0 seconds
Verified: onlyHolderCanChangeAllowance-transferFrom(address,address,uint256)
onlyHolderCanChangeAllowance-transferFrom(address,address,uint256): Properties successfully verified on all inputs
Diversification did not produce statistics.
Total time for contract: 0 seconds ; Split time: 0 seconds ; Number of problems: 1 ; Solver time : 0 seconds
Verified: onlyHolderCanChangeAllowance-burn(address,uint256)
onlyHolderCanChangeAllowance-burn(address,uint256): Properties successfully verified on all inputs
marking potential over-/underflowing expression class vc.data.TACExpr$BinOp$Sub with 'will not wrap' annotation
marking potential over-/underflowing expression class vc.data.TACExpr$BinOp$Sub with 'will not wrap' annotation
marking potential over-/underflowing expression class vc.data.TACExpr$BinOp$Sub with 'will not wrap' annotation
marking potential over-/underflowing expression class vc.data.TACExpr$BinOp$Sub with 'will not wrap' annotation
marking potential over-/underflowing expression class vc.data.TACExpr$BinOp$Sub with 'will not wrap' annotation
marking potential over-/underflowing expression class vc.data.TACExpr$BinOp$Sub with 'will not wrap' annotation
marking potential over-/underflowing expression class vc.data.TACExpr$BinOp$Sub with 'will not wrap' annotation
marking potential over-/underflowing expression class vc.data.TACExpr$BinOp$Sub with 'will not wrap' annotation
marking potential over-/underflowing expression class vc.data.TACExpr$BinOp$Sub with 'will not wrap' annotation
marking potential over-/underflowing expression class vc.data.TACExpr$BinOp$Sub with 'will not wrap' annotation
Artifact output.json already registered in REPORTS
Found variables used before being initialized in balancesBoundedByTotalSupply_preserve-burn(address,uint256). Enable info logs for DSA
Diversification did not produce statistics.
Total time for contract: 0 seconds ; Split time: 0 seconds ; Number of problems: 1 ; Solver time : 0 seconds
Verified: balancesBoundedByTotalSupply_preserve-withdraw(uint256)
balancesBoundedByTotalSupply_preserve-withdraw(uint256): Properties successfully verified on all inputs
Rule withdraw(uint256): Callee contract unresolved, callee sighash unresolved
[Rule withdraw(uint256)]: [Call Resolution Table][Caller: ERC20.withdraw(uint256) (line:407)]: The Prover could not resolve the callee, thus, havoc'd the call
marking potential over-/underflowing expression class vc.data.TACExpr$BinOp$Sub with 'will not wrap' annotation
marking potential over-/underflowing expression class vc.data.TACExpr$BinOp$Sub with 'will not wrap' annotation
marking potential over-/underflowing expression class vc.data.TACExpr$BinOp$Sub with 'will not wrap' annotation
Proved that add can't overflow for bound 115792089237316195423570985008687907853269984665640564039457584007913129639935, removing 1 check
marking potential over-/underflowing expression class vc.data.TACExpr$Vec$Add$Binary with 'will not wrap' annotation
there already is a replacement registered in this PatchingProgram for pointer "CmdPointer(block=0_0_0_6_0_0, pos=117)", only one replacement is allowed per pointer
marking potential over-/underflowing expression class vc.data.TACExpr$BinOp$Sub with 'will not wrap' annotation
Artifact output.json already registered in REPORTS
Found variables used before being initialized in onlyHolderCanChangeAllowance-decreaseAllowance(address,uint256). Enable info logs for DSA
Artifact output.json already registered in REPORTS
Found variables used before being initialized in onlyHolderCanChangeAllowance-transfer(address,uint256). Enable info logs for DSA
marking potential over-/underflowing expression class vc.data.TACExpr$BinOp$Sub with 'will not wrap' annotation
marking potential over-/underflowing expression class vc.data.TACExpr$BinOp$Sub with 'will not wrap' annotation
marking potential over-/underflowing expression class vc.data.TACExpr$BinOp$Sub with 'will not wrap' annotation
marking potential over-/underflowing expression class vc.data.TACExpr$BinOp$Sub with 'will not wrap' annotation
marking potential over-/underflowing expression class vc.data.TACExpr$BinOp$Sub with 'will not wrap' annotation
Artifact output.json already registered in REPORTS
dumping codeMap "PresolverRule-onlyHolderCanChangeAllowance-decreaseAllowance(address,uint256)" in html format, but the file name "PresolverRule-onlyHolderCanChangeAllowance-decreaseAllowance(address,uint256)" is lacking the `.html` suffix. Appending it and dumping that file.
marking potential over-/underflowing expression class vc.data.TACExpr$BinOp$Sub with 'will not wrap' annotation
marking potential over-/underflowing expression class vc.data.TACExpr$BinOp$Sub with 'will not wrap' annotation
marking potential over-/underflowing expression class vc.data.TACExpr$BinOp$Sub with 'will not wrap' annotation
Found variables used before being initialized in onlyHolderCanChangeAllowance-name(). Enable info logs for DSA
marking potential over-/underflowing expression class vc.data.TACExpr$BinOp$Sub with 'will not wrap' annotation
marking potential over-/underflowing expression class vc.data.TACExpr$BinOp$Sub with 'will not wrap' annotation
marking potential over-/underflowing expression class vc.data.TACExpr$BinOp$Sub with 'will not wrap' annotation
dumping codeMap "PresolverRule-balancesBoundedByTotalSupply_preserve-burn(address,uint256)" in html format, but the file name "PresolverRule-balancesBoundedByTotalSupply_preserve-burn(address,uint256)" is lacking the `.html` suffix. Appending it and dumping that file.
Artifact output.json already registered in REPORTS
Found variables used before being initialized in onlyHolderCanChangeAllowance-approve(address,uint256). Enable info logs for DSA
dumping codeMap "PresolverRule-onlyHolderCanChangeAllowance-transfer(address,uint256)" in html format, but the file name "PresolverRule-onlyHolderCanChangeAllowance-transfer(address,uint256)" is lacking the `.html` suffix. Appending it and dumping that file.
Artifact output.json already registered in REPORTS
Found variables used before being initialized in balancesBoundedByTotalSupply_preserve-decreaseAllowance(address,uint256). Enable info logs for DSA
dumping codeMap "PresolverRule-onlyHolderCanChangeAllowance-approve(address,uint256)" in html format, but the file name "PresolverRule-onlyHolderCanChangeAllowance-approve(address,uint256)" is lacking the `.html` suffix. Appending it and dumping that file.
dumping codeMap "PresolverRule-onlyHolderCanChangeAllowance-name()" in html format, but the file name "PresolverRule-onlyHolderCanChangeAllowance-name()" is lacking the `.html` suffix. Appending it and dumping that file.
marking potential over-/underflowing expression class vc.data.TACExpr$BinOp$Sub with 'will not wrap' annotation
marking potential over-/underflowing expression class vc.data.TACExpr$BinOp$Sub with 'will not wrap' annotation
marking potential over-/underflowing expression class vc.data.TACExpr$BinOp$Sub with 'will not wrap' annotation
marking potential over-/underflowing expression class vc.data.TACExpr$BinOp$Sub with 'will not wrap' annotation
marking potential over-/underflowing expression class vc.data.TACExpr$BinOp$Sub with 'will not wrap' annotation
marking potential over-/underflowing expression class vc.data.TACExpr$BinOp$Sub with 'will not wrap' annotation
marking potential over-/underflowing expression class vc.data.TACExpr$BinOp$Sub with 'will not wrap' annotation
marking potential over-/underflowing expression class vc.data.TACExpr$BinOp$Sub with 'will not wrap' annotation
marking potential over-/underflowing expression class vc.data.TACExpr$BinOp$Sub with 'will not wrap' annotation
Artifact output.json already registered in REPORTS
dumping codeMap "PresolverRule-balancesBoundedByTotalSupply_preserve-decreaseAllowance(address,uint256)" in html format, but the file name "PresolverRule-balancesBoundedByTotalSupply_preserve-decreaseAllowance(address,uint256)" is lacking the `.html` suffix. Appending it and dumping that file.
Found variables used before being initialized in balancesBoundedByTotalSupply_preserve-approve(address,uint256). Enable info logs for DSA
Artifact output.json already registered in REPORTS
Found variables used before being initialized in onlyHolderCanChangeAllowance-withdraw(uint256). Enable info logs for DSA
Diversification did not produce statistics.
Total time for contract: 0 seconds ; Split time: 0 seconds ; Number of problems: 1 ; Solver time : 0 seconds
Verified: onlyHolderCanChangeAllowance-decreaseAllowance(address,uint256)
onlyHolderCanChangeAllowance-decreaseAllowance(address,uint256): Properties successfully verified on all inputs
dumping codeMap "PresolverRule-balancesBoundedByTotalSupply_preserve-approve(address,uint256)" in html format, but the file name "PresolverRule-balancesBoundedByTotalSupply_preserve-approve(address,uint256)" is lacking the `.html` suffix. Appending it and dumping that file.
prettifyModel finished.
Diversification did not produce statistics.
Total time for contract: 0 seconds ; Split time: 0 seconds ; Number of problems: 1 ; Solver time : 0 seconds
Violated: balancesBoundedByTotalSupply_preserve-burn(address,uint256)
balancesBoundedByTotalSupply_preserve-burn(address,uint256): A property is violated
The names of the local variables are [alice, bob, certoraInvF.isFallback, certoraInvF.isPayable, certoraInvF.isPure, certoraInvF.isView, certoraInvF.numberOfArguments, certoraInvF.selector, invariantCalldata, invariantEnv.block.coinbase, invariantEnv.block.difficulty, invariantEnv.block.gaslimit, invariantEnv.block.number, invariantEnv.block.timestamp, invariantEnv.msg.sender, invariantEnv.msg.value, invariantEnv.tx.origin, lastHasThrown, lastReverted]
StorageState: ERC20._balances[14]: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc83 - STORAGE_HAVOC
StorageState: ERC20._balances[0x401]: 15 - STORAGE_HAVOC
StorageState: ERC20._balances[0x475]: 5 - STORAGE_HAVOC
StorageState: ERC20._owner: ERC20 (0x474) - STORAGE_HAVOC
StorageState: ERC20._totalSupply: 86 - STORAGE_HAVOC
CallTrace: caller: assume invariant in pre-state callee: ERC20.balanceOf(address)
CallTrace: internal call: (internal) balanceOf(address)
Load from: _balances[*]
StorageState: ERC20._balances[14]: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc83 - STORAGE_HAVOC
StorageState: ERC20._balances[0x401]: 15 - STORAGE_HAVOC
StorageState: ERC20._balances[0x475]: 5 - STORAGE_HAVOC
StorageState: ERC20._owner: ERC20 (0x474) - STORAGE_HAVOC
StorageState: ERC20._totalSupply: 86 - STORAGE_HAVOC
(internal) ERC20.balanceOf(account=0x475) / 5
EXTERNAL CALL ERC20.balanceOf(address): all expected parameters found in value map
EXTERNAL CALL ERC20.balanceOf(address): all expected return values found in value map
ERC20.balanceOf(account=X) / 5
CallTrace: caller: assume invariant in pre-state callee: ERC20.balanceOf(address)
CallTrace: internal call: (internal) balanceOf(address)
Load from: _balances[*]
StorageState: ERC20._balances[14]: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc83 - STORAGE_HAVOC
StorageState: ERC20._balances[0x401]: 15 - STORAGE_HAVOC
StorageState: ERC20._balances[0x475]: 5 - STORAGE_HAVOC
StorageState: ERC20._owner: ERC20 (0x474) - STORAGE_HAVOC
StorageState: ERC20._totalSupply: 86 - STORAGE_HAVOC
(internal) ERC20.balanceOf(account=0x401) / 15
EXTERNAL CALL ERC20.balanceOf(address): all expected parameters found in value map
EXTERNAL CALL ERC20.balanceOf(address): all expected return values found in value map
ERC20.balanceOf(account=X) / 15
Got a non-constant, non-variable operand (Operand(out=I52:int, exp=ERC20.balanceOf(address account) returns (uint256)(alice))) that is not in the builderState. Failed to construct its complete syntax-tree
Got a non-constant, non-variable operand (Operand(out=I75:int, exp=ERC20.balanceOf(address account) returns (uint256)(bob))) that is not in the builderState. Failed to construct its complete syntax-tree
CallTrace: caller: assume invariant in pre-state callee: ERC20.totalSupply()
CallTrace: internal call: (internal) totalSupply()
Load from: _totalSupply
StorageState: ERC20._balances[14]: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc83 - STORAGE_HAVOC
StorageState: ERC20._balances[0x401]: 15 - STORAGE_HAVOC
StorageState: ERC20._balances[0x475]: 5 - STORAGE_HAVOC
StorageState: ERC20._owner: ERC20 (0x474) - STORAGE_HAVOC
StorageState: ERC20._totalSupply: 86 - STORAGE_HAVOC
(internal) ERC20.totalSupply() / 86
EXTERNAL CALL ERC20.totalSupply(): all expected parameters found in value map
EXTERNAL CALL ERC20.totalSupply(): all expected return values found in value map
ERC20.totalSupply() / 86
Got a non-constant, non-variable operand (Operand(out=I90:int, exp=to_mathint(ERC20.totalSupply() returns (uint256)()))) that is not in the builderState. Failed to construct its complete syntax-tree
Exp ERC20.balanceOf(account=alice) + ERC20.balanceOf(account=bob) <= to_mathint(ERC20.totalSupply()) has the sub expressions: [ERC20.balanceOf(account=alice) + ERC20.balanceOf(account=bob), to_mathint(ERC20.totalSupply())]
CallTrace: caller: check effects of step taken by one of the functions callee: ERC20.burn(address, uint256)
Load from: sender.balance
Store at: sender.balance
Load from: receiver.balance
Store at: receiver.balance
CallTrace: internal call: (internal) burn(address,uint256)
Load from: _owner
CallTrace: internal call: (internal) _beforeTokenTransfer(address,address,uint256)
StorageState: ERC20._balances[14]: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc83 - STORAGE_HAVOC
StorageState: ERC20._balances[0x401]: 15 - STORAGE_HAVOC
StorageState: ERC20._balances[0x475]: 5 - STORAGE_HAVOC
StorageState: ERC20._owner: ERC20 (0x474) - STORAGE_HAVOC
StorageState: ERC20._totalSupply: 86 - STORAGE_HAVOC
(internal) ERC20._beforeTokenTransfer(from=14, to=0, amount=83) / 
Load from: _balances[*]
Store at: _balances[*]
Load from: _totalSupply
Store at: _totalSupply
CallTrace: internal call: (internal) _afterTokenTransfer(address,address,uint256)
StorageState: ERC20._balances[14]: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc30 (changed) - STORAGE_HAVOC_DEPENDENT
StorageState: ERC20._balances[0x401]: 15 - STORAGE_HAVOC
StorageState: ERC20._balances[0x475]: 5 - STORAGE_HAVOC
StorageState: ERC20._owner: ERC20 (0x474) - STORAGE_HAVOC
StorageState: ERC20._totalSupply: 3 (changed) - STORAGE_HAVOC_DEPENDENT
(internal) ERC20._afterTokenTransfer(from=14, to=0, amount=83) / 
StorageState: ERC20._balances[14]: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc30 - STORAGE_HAVOC_DEPENDENT
StorageState: ERC20._balances[0x401]: 15 - STORAGE_HAVOC
StorageState: ERC20._balances[0x475]: 5 - STORAGE_HAVOC
StorageState: ERC20._owner: ERC20 (0x474) - STORAGE_HAVOC
StorageState: ERC20._totalSupply: 3 - STORAGE_HAVOC_DEPENDENT
(internal) ERC20.burn(account=14, amount=83) / 
EXTERNAL CALL ERC20.burn(address, uint256): all expected parameters found in value map
EXTERNAL CALL ERC20.burn(address, uint256): all expected return values found in value map
ERC20.burn(account=14, amount=83) / 
CallTrace: caller: assert invariant in post-state callee: ERC20.balanceOf(address)
CallTrace: internal call: (internal) balanceOf(address)
Load from: _balances[*]
StorageState: ERC20._balances[14]: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc30 - STORAGE_HAVOC_DEPENDENT
StorageState: ERC20._balances[0x401]: 15 - STORAGE_HAVOC
StorageState: ERC20._balances[0x475]: 5 - STORAGE_HAVOC
StorageState: ERC20._owner: ERC20 (0x474) - STORAGE_HAVOC
StorageState: ERC20._totalSupply: 3 - STORAGE_HAVOC_DEPENDENT
(internal) ERC20.balanceOf(account=0x475) / 5
EXTERNAL CALL ERC20.balanceOf(address): all expected parameters found in value map
EXTERNAL CALL ERC20.balanceOf(address): all expected return values found in value map
ERC20.balanceOf(account=X) / 5
CallTrace: caller: assert invariant in post-state callee: ERC20.balanceOf(address)
CallTrace: internal call: (internal) balanceOf(address)
Load from: _balances[*]
StorageState: ERC20._balances[14]: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc30 - STORAGE_HAVOC_DEPENDENT
StorageState: ERC20._balances[0x401]: 15 - STORAGE_HAVOC
StorageState: ERC20._balances[0x475]: 5 - STORAGE_HAVOC
StorageState: ERC20._owner: ERC20 (0x474) - STORAGE_HAVOC
StorageState: ERC20._totalSupply: 3 - STORAGE_HAVOC_DEPENDENT
(internal) ERC20.balanceOf(account=0x401) / 15
EXTERNAL CALL ERC20.balanceOf(address): all expected parameters found in value map
EXTERNAL CALL ERC20.balanceOf(address): all expected return values found in value map
ERC20.balanceOf(account=X) / 15
Got a non-constant, non-variable operand (Operand(out=I113:int, exp=ERC20.balanceOf(address account) returns (uint256)(alice))) that is not in the builderState. Failed to construct its complete syntax-tree
Got a non-constant, non-variable operand (Operand(out=I136:int, exp=ERC20.balanceOf(address account) returns (uint256)(bob))) that is not in the builderState. Failed to construct its complete syntax-tree
CallTrace: caller: assert invariant in post-state callee: ERC20.totalSupply()
CallTrace: internal call: (internal) totalSupply()
Load from: _totalSupply
StorageState: ERC20._balances[14]: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc30 - STORAGE_HAVOC_DEPENDENT
StorageState: ERC20._balances[0x401]: 15 - STORAGE_HAVOC
StorageState: ERC20._balances[0x475]: 5 - STORAGE_HAVOC
StorageState: ERC20._owner: ERC20 (0x474) - STORAGE_HAVOC
StorageState: ERC20._totalSupply: 3 - STORAGE_HAVOC_DEPENDENT
(internal) ERC20.totalSupply() / 3
EXTERNAL CALL ERC20.totalSupply(): all expected parameters found in value map
EXTERNAL CALL ERC20.totalSupply(): all expected return values found in value map
ERC20.totalSupply() / 3
Got a non-constant, non-variable operand (Operand(out=I151:int, exp=to_mathint(ERC20.totalSupply() returns (uint256)()))) that is not in the builderState. Failed to construct its complete syntax-tree
Exp ERC20.balanceOf(account=alice) + ERC20.balanceOf(account=bob) <= to_mathint(ERC20.totalSupply()) has the sub expressions: [ERC20.balanceOf(account=alice) + ERC20.balanceOf(account=bob), to_mathint(ERC20.totalSupply())]
StorageState: ERC20._balances[14]: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc30 - STORAGE_HAVOC_DEPENDENT
StorageState: ERC20._balances[0x401]: 15 - STORAGE_HAVOC
StorageState: ERC20._balances[0x475]: 5 - STORAGE_HAVOC
StorageState: ERC20._owner: ERC20 (0x474) - STORAGE_HAVOC
StorageState: ERC20._totalSupply: 3 - STORAGE_HAVOC_DEPENDENT
prettifyModel finished.
Diversification did not produce statistics.
Total time for contract: 2 seconds ; Split time: 0 seconds ; Number of problems: 1 ; Solver time : 2 seconds
Violated: totalSupplyIsSumOfBalances_preserve-withdraw(uint256)
totalSupplyIsSumOfBalances_preserve-withdraw(uint256): A property is violated
Rule withdraw(uint256): Callee contract unresolved, callee sighash unresolved
[Rule withdraw(uint256)]: [Call Resolution Table][Caller: ERC20.withdraw(uint256) (line:407)]: The Prover could not resolve the callee, thus, havoc'd the call
The names of the local variables are [certoraInvF.isFallback, certoraInvF.isPayable, certoraInvF.isPure, certoraInvF.isView, certoraInvF.numberOfArguments, certoraInvF.selector, invariantCalldata, invariantEnv.block.coinbase, invariantEnv.block.difficulty, invariantEnv.block.gaslimit, invariantEnv.block.number, invariantEnv.block.timestamp, invariantEnv.msg.sender, invariantEnv.msg.value, invariantEnv.tx.origin, lastHasThrown, lastReverted]
StorageState: ERC20._balances[0x2711]: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdf53 - STORAGE_HAVOC
StorageState: ERC20._totalSupply: 6 - STORAGE_HAVOC
CallTrace: caller: assume invariant in pre-state callee: ERC20.totalSupply()
CallTrace: internal call: (internal) totalSupply()
Load from: _totalSupply
StorageState: ERC20._balances[0x2711]: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdf53 - STORAGE_HAVOC
StorageState: ERC20._totalSupply: 6 - STORAGE_HAVOC
(internal) ERC20.totalSupply() / 6
EXTERNAL CALL ERC20.totalSupply(): all expected parameters found in value map
EXTERNAL CALL ERC20.totalSupply(): all expected return values found in value map
ERC20.totalSupply() / 6
Got a non-constant, non-variable operand (Operand(out=CANON29:int, exp=to_mathint(ERC20.totalSupply() returns (uint256)()))) that is not in the builderState. Failed to construct its complete syntax-tree
Exp to_mathint(ERC20.totalSupply()) == sum_of_balances has the sub expressions: [to_mathint(ERC20.totalSupply()), sum_of_balances]
CallTrace: caller: check effects of step taken by one of the functions callee: ERC20.withdraw(uint256)
Load from: sender.balance
Store at: sender.balance
Load from: receiver.balance
Store at: receiver.balance
Load from: _balances[*]
Load from: _balances[*]
Store at: _balances[*]
Load from: sender.balance
Store at: sender.balance
Load from: receiver.balance
Store at: receiver.balance
EXTERNAL CALL ERC20.withdraw(uint256): all expected parameters found in value map
EXTERNAL CALL ERC20.withdraw(uint256): all expected return values found in value map
ERC20.withdraw(amount=2) / 
CallTrace: caller: assert invariant in post-state callee: ERC20.totalSupply()
CallTrace: internal call: (internal) totalSupply()
Load from: _totalSupply
StorageState: ERC20._balances[0x2711]: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdf51 (changed) - STORAGE_HAVOC_DEPENDENT
StorageState: ERC20._totalSupply: 6 - STORAGE_HAVOC
(internal) ERC20.totalSupply() / 6
EXTERNAL CALL ERC20.totalSupply(): all expected parameters found in value map
EXTERNAL CALL ERC20.totalSupply(): all expected return values found in value map
ERC20.totalSupply() / 6
Got a non-constant, non-variable operand (Operand(out=CANON107:int, exp=to_mathint(ERC20.totalSupply() returns (uint256)()))) that is not in the builderState. Failed to construct its complete syntax-tree
Exp to_mathint(ERC20.totalSupply()) == sum_of_balances has the sub expressions: [to_mathint(ERC20.totalSupply()), sum_of_balances]
dumping codeMap "PresolverRule-onlyHolderCanChangeAllowance-withdraw(uint256)" in html format, but the file name "PresolverRule-onlyHolderCanChangeAllowance-withdraw(uint256)" is lacking the `.html` suffix. Appending it and dumping that file.
StorageState: ERC20._balances[0x2711]: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdf51 - STORAGE_HAVOC_DEPENDENT
StorageState: ERC20._totalSupply: 6 - STORAGE_HAVOC
ERC20=ERC20 (0x2710)
certoraInvF.isFallback=false
certoraInvF.isPayable=true
certoraInvF.isPure=false
certoraInvF.isView=false
certoraInvF.numberOfArguments=0
certoraInvF.selector=0xd0e30db0
invariantEnv.block.coinbase=0x401
invariantEnv.block.difficulty=9
invariantEnv.block.gaslimit=8
invariantEnv.block.number=7
invariantEnv.block.timestamp=6
invariantEnv.msg.sender=0x2711
invariantEnv.msg.value=2
invariantEnv.tx.origin=0x402
lastHasThrown=false
lastReverted=false
ERC20=ERC20 (0x2712)
certoraInvF.isFallback=false
certoraInvF.isPayable=false
certoraInvF.isPure=false
certoraInvF.isView=false
certoraInvF.numberOfArguments=1
certoraInvF.selector=0x2e1a7d4d
invariantCalldata=bytemap initialized but unknown
invariantEnv.block.coinbase=0x402
invariantEnv.block.difficulty=8
invariantEnv.block.gaslimit=7
invariantEnv.block.number=5
invariantEnv.block.timestamp=3
invariantEnv.msg.sender=0x2711
invariantEnv.msg.value=0
invariantEnv.tx.origin=0x401
lastHasThrown=false
lastReverted=false
Artifact FinalResults.html already registered in REPORTS
Diversification did not produce statistics.
Total time for contract: 0 seconds ; Split time: 0 seconds ; Number of problems: 1 ; Solver time : 0 seconds
Verified: onlyHolderCanChangeAllowance-transfer(address,uint256)
onlyHolderCanChangeAllowance-transfer(address,uint256): Properties successfully verified on all inputs
Diversification did not produce statistics.
Total time for contract: 0 seconds ; Split time: 0 seconds ; Number of problems: 1 ; Solver time : 0 seconds
Verified: onlyHolderCanChangeAllowance-name()
onlyHolderCanChangeAllowance-name(): Properties successfully verified on all inputs
Diversification did not produce statistics.
Total time for contract: 0 seconds ; Split time: 0 seconds ; Number of problems: 1 ; Solver time : 0 seconds
Verified: balancesBoundedByTotalSupply_preserve-decreaseAllowance(address,uint256)
balancesBoundedByTotalSupply_preserve-decreaseAllowance(address,uint256): Properties successfully verified on all inputs
Diversification did not produce statistics.
Total time for contract: 0 seconds ; Split time: 0 seconds ; Number of problems: 1 ; Solver time : 0 seconds
Verified: onlyHolderCanChangeAllowance-approve(address,uint256)
onlyHolderCanChangeAllowance-approve(address,uint256): Properties successfully verified on all inputs
Diversification did not produce statistics.
Total time for contract: 0 seconds ; Split time: 0 seconds ; Number of problems: 1 ; Solver time : 0 seconds
Diversification did not produce statistics.
Verified: balancesBoundedByTotalSupply_preserve-approve(address,uint256)
balancesBoundedByTotalSupply_preserve-approve(address,uint256): Properties successfully verified on all inputs
Total time for contract: 0 seconds ; Split time: 0 seconds ; Number of problems: 1 ; Solver time : 0 seconds
Verified: onlyHolderCanChangeAllowance-withdraw(uint256)
onlyHolderCanChangeAllowance-withdraw(uint256): Properties successfully verified on all inputs
ERC20=ERC20 (0x2711)
alice=0x402
bob=0x401
certoraInvF.isFallback=false
certoraInvF.isPayable=true
certoraInvF.isPure=false
certoraInvF.isView=false
certoraInvF.numberOfArguments=0
certoraInvF.selector=0xd0e30db0
invariantEnv.block.coinbase=0x403
invariantEnv.block.difficulty=10
invariantEnv.block.gaslimit=9
invariantEnv.block.number=3
invariantEnv.block.timestamp=8
invariantEnv.msg.sender=0x401
invariantEnv.msg.value=5
invariantEnv.tx.origin=0x404
lastHasThrown=false
lastReverted=false
ERC20=ERC20 (0x474)
alice=0x475
bob=0x401
certoraInvF.isFallback=false
certoraInvF.isPayable=false
certoraInvF.isPure=false
certoraInvF.isView=false
certoraInvF.numberOfArguments=2
certoraInvF.selector=0x9dc29fac
invariantCalldata=bytemap initialized but unknown
invariantEnv.block.coinbase=0x403
invariantEnv.block.difficulty=9
invariantEnv.block.gaslimit=8
invariantEnv.block.number=7
invariantEnv.block.timestamp=6
invariantEnv.msg.sender=ERC20 (0x474)
invariantEnv.msg.value=0
invariantEnv.tx.origin=0x402
lastHasThrown=false
lastReverted=false
ERC20=ERC20 (0x16dc)
alice=0x2712
bob=0x2712
certoraInvF.isFallback=false
certoraInvF.isPayable=false
certoraInvF.isPure=false
certoraInvF.isView=false
certoraInvF.numberOfArguments=2
certoraInvF.selector=0x40c10f19
invariantCalldata=bytemap initialized but unknown
invariantEnv.block.coinbase=0x402
invariantEnv.block.difficulty=9
invariantEnv.block.gaslimit=8
invariantEnv.block.number=7
invariantEnv.block.timestamp=3
invariantEnv.msg.sender=ERC20 (0x16dc)
invariantEnv.msg.value=0
invariantEnv.tx.origin=0x401
lastHasThrown=false
lastReverted=false
Artifact FinalResults.html already registered in REPORTS
Rule withdraw(uint256): Callee contract unresolved, callee sighash unresolved
[Rule withdraw(uint256)]: [Call Resolution Table][Caller: ERC20.withdraw(uint256) (line:407)]: The Prover could not resolve the callee, thus, havoc'd the call
marking potential over-/underflowing expression class vc.data.TACExpr$BinOp$Sub with 'will not wrap' annotation
marking potential over-/underflowing expression class vc.data.TACExpr$BinOp$Sub with 'will not wrap' annotation
marking potential over-/underflowing expression class vc.data.TACExpr$BinOp$Sub with 'will not wrap' annotation
marking potential over-/underflowing expression class vc.data.TACExpr$BinOp$Sub with 'will not wrap' annotation
Artifact output.json already registered in REPORTS
Found variables used before being initialized in onlyHolderCanChangeAllowance-decimals(). Enable info logs for DSA
marking potential over-/underflowing expression class vc.data.TACExpr$BinOp$Sub with 'will not wrap' annotation
marking potential over-/underflowing expression class vc.data.TACExpr$BinOp$Sub with 'will not wrap' annotation
marking potential over-/underflowing expression class vc.data.TACExpr$BinOp$Sub with 'will not wrap' annotation
Proved that add can't overflow for bound 115792089237316195423570985008687907853269984665640564039457584007913129639935, removing 1 check
marking potential over-/underflowing expression class vc.data.TACExpr$Vec$Add$Binary with 'will not wrap' annotation
there already is a replacement registered in this PatchingProgram for pointer "CmdPointer(block=0_0_0_6_0_0, pos=41)", only one replacement is allowed per pointer
marking potential over-/underflowing expression class vc.data.TACExpr$BinOp$Sub with 'will not wrap' annotation
Artifact output.json already registered in REPORTS
Found variables used before being initialized in onlyHolderCanChangeAllowance-symbol(). Enable info logs for DSA
Artifact output.json already registered in REPORTS
Found variables used before being initialized in onlyHolderCanChangeAllowance-totalSupply(). Enable info logs for DSA
marking potential over-/underflowing expression class vc.data.TACExpr$BinOp$Sub with 'will not wrap' annotation
marking potential over-/underflowing expression class vc.data.TACExpr$BinOp$Sub with 'will not wrap' annotation
Artifact output.json already registered in REPORTS
Found variables used before being initialized in onlyHolderCanChangeAllowance-deposit(). Enable info logs for DSA
Artifact output.json already registered in REPORTS
dumping codeMap "PresolverRule-onlyHolderCanChangeAllowance-decimals()" in html format, but the file name "PresolverRule-onlyHolderCanChangeAllowance-decimals()" is lacking the `.html` suffix. Appending it and dumping that file.
Found variables used before being initialized in onlyHolderCanChangeAllowance-_owner(). Enable info logs for DSA
dumping codeMap "PresolverRule-onlyHolderCanChangeAllowance-symbol()" in html format, but the file name "PresolverRule-onlyHolderCanChangeAllowance-symbol()" is lacking the `.html` suffix. Appending it and dumping that file.
dumping codeMap "PresolverRule-onlyHolderCanChangeAllowance-totalSupply()" in html format, but the file name "PresolverRule-onlyHolderCanChangeAllowance-totalSupply()" is lacking the `.html` suffix. Appending it and dumping that file.
dumping codeMap "PresolverRule-onlyHolderCanChangeAllowance-deposit()" in html format, but the file name "PresolverRule-onlyHolderCanChangeAllowance-deposit()" is lacking the `.html` suffix. Appending it and dumping that file.
dumping codeMap "PresolverRule-onlyHolderCanChangeAllowance-_owner()" in html format, but the file name "PresolverRule-onlyHolderCanChangeAllowance-_owner()" is lacking the `.html` suffix. Appending it and dumping that file.
Diversification did not produce statistics.
Diversification did not produce statistics.
Total time for contract: 0 seconds ; Split time: 0 seconds ; Number of problems: 1 ; Solver time : 0 seconds
Verified: onlyHolderCanChangeAllowance-totalSupply()
onlyHolderCanChangeAllowance-totalSupply(): Properties successfully verified on all inputs
Total time for contract: 0 seconds ; Split time: 0 seconds ; Number of problems: 1 ; Solver time : 0 seconds
Verified: onlyHolderCanChangeAllowance-decimals()
onlyHolderCanChangeAllowance-decimals(): Properties successfully verified on all inputs
Diversification did not produce statistics.
Diversification did not produce statistics.
Total time for contract: 0 seconds ; Split time: 0 seconds ; Number of problems: 1 ; Solver time : 0 seconds
Verified: onlyHolderCanChangeAllowance-symbol()
onlyHolderCanChangeAllowance-symbol(): Properties successfully verified on all inputs
Total time for contract: 0 seconds ; Split time: 0 seconds ; Number of problems: 1 ; Solver time : 0 seconds
Verified: onlyHolderCanChangeAllowance-deposit()
onlyHolderCanChangeAllowance-deposit(): Properties successfully verified on all inputs
Diversification did not produce statistics.
Total time for contract: 0 seconds ; Split time: 0 seconds ; Number of problems: 1 ; Solver time : 0 seconds
Verified: onlyHolderCanChangeAllowance-_owner()
onlyHolderCanChangeAllowance-_owner(): Properties successfully verified on all inputs
Artifact FinalResults.html already registered in REPORTS
Report alert: Function transferFrom(address,address,uint256) was declared `envfree` but depends on the environment. Rules that call this function (without an `env` argument) may produce wrong results, or trigger internal errors.
hint: Remove the `envfree` annotation from transferFrom(address,address,uint256)
No violated assertion found
No violated assertion found
No violated assertion found
No violated assertion found
No violated assertion found
ERC20=ERC20 (0x2711)
ERC20=ERC20 (0x2711)
ERC20=ERC20 (0x2711)
ERC20=ERC20 (0x2710)
certoraInvF.isFallback=false
certoraInvF.isPayable=true
certoraInvF.isPure=false
certoraInvF.isView=false
certoraInvF.numberOfArguments=0
certoraInvF.selector=0xd0e30db0
invariantEnv.block.coinbase=0x401
invariantEnv.block.difficulty=9
invariantEnv.block.gaslimit=8
invariantEnv.block.number=7
invariantEnv.block.timestamp=6
invariantEnv.msg.sender=0x2711
invariantEnv.msg.value=2
invariantEnv.tx.origin=0x402
lastHasThrown=false
lastReverted=false
ERC20=ERC20 (0x2712)
certoraInvF.isFallback=false
certoraInvF.isPayable=false
certoraInvF.isPure=false
certoraInvF.isView=false
certoraInvF.numberOfArguments=1
certoraInvF.selector=0x2e1a7d4d
invariantCalldata=bytemap initialized but unknown
invariantEnv.block.coinbase=0x402
invariantEnv.block.difficulty=8
invariantEnv.block.gaslimit=7
invariantEnv.block.number=5
invariantEnv.block.timestamp=3
invariantEnv.msg.sender=0x2711
invariantEnv.msg.value=0
invariantEnv.tx.origin=0x401
lastHasThrown=false
lastReverted=false
ERC20=ERC20 (0x2711)
alice=0x402
bob=0x401
certoraInvF.isFallback=false
certoraInvF.isPayable=true
certoraInvF.isPure=false
certoraInvF.isView=false
certoraInvF.numberOfArguments=0
certoraInvF.selector=0xd0e30db0
invariantEnv.block.coinbase=0x403
invariantEnv.block.difficulty=10
invariantEnv.block.gaslimit=9
invariantEnv.block.number=3
invariantEnv.block.timestamp=8
invariantEnv.msg.sender=0x401
invariantEnv.msg.value=5
invariantEnv.tx.origin=0x404
lastHasThrown=false
lastReverted=false
ERC20=ERC20 (0x474)
alice=0x475
bob=0x401
certoraInvF.isFallback=false
certoraInvF.isPayable=false
certoraInvF.isPure=false
certoraInvF.isView=false
certoraInvF.numberOfArguments=2
certoraInvF.selector=0x9dc29fac
invariantCalldata=bytemap initialized but unknown
invariantEnv.block.coinbase=0x403
invariantEnv.block.difficulty=9
invariantEnv.block.gaslimit=8
invariantEnv.block.number=7
invariantEnv.block.timestamp=6
invariantEnv.msg.sender=ERC20 (0x474)
invariantEnv.msg.value=0
invariantEnv.tx.origin=0x402
lastHasThrown=false
lastReverted=false
ERC20=ERC20 (0x16dc)
alice=0x2712
bob=0x2712
certoraInvF.isFallback=false
certoraInvF.isPayable=false
certoraInvF.isPure=false
certoraInvF.isView=false
certoraInvF.numberOfArguments=2
certoraInvF.selector=0x40c10f19
invariantCalldata=bytemap initialized but unknown
invariantEnv.block.coinbase=0x402
invariantEnv.block.difficulty=9
invariantEnv.block.gaslimit=8
invariantEnv.block.number=7
invariantEnv.block.timestamp=3
invariantEnv.msg.sender=ERC20 (0x16dc)
invariantEnv.msg.value=0
invariantEnv.tx.origin=0x401
lastHasThrown=false
lastReverted=false
Artifact FinalResults.html already registered in REPORTS
